#include "../pch.h"
#include "ChaoGardenManager.h"
#include "LocationManager.h"
#include "../Utilities/MessageQueue.h"


DataPointer(char, ChaoEggsRandomized, 0x19F6460);
DataPointer(char, ChaoNamesUsed, 0x19F6461);
DataPointer(char, ChaoGardenTimescale, 0x01312DE4);


struct BlackMarketStockItem
{
	int Cost;
	int gap_4;
	int16_t unknown_8;
	int16_t NameTextIndex;
	int16_t DescTextIndex;
	int16_t gap_E;
};

DataArray(BlackMarketStockItem, BlackMarketEggStock,   0x8A7B68, 0x45);
DataArray(BlackMarketStockItem, BlackMarketSeedStock,  0x8A7FB8, 0x7);
DataArray(BlackMarketStockItem, BlackMarketFruitStock, 0x8A8028, 0x18);
DataArray(BlackMarketStockItem, BlackMarketHatStock,   0x8A81A8, 0x55);
DataArray(BlackMarketStockItem, BlackMarketMenuStock,  0x8A86F8, 0x3);

ObjectMaster* BlackMarketObject = nullptr;
void __cdecl alg_blackmarket_prolog_r(ObjectMaster* obj);
Trampoline alg_blackmarket_prolog_t(0x58BFC0, 0x58BFC5, alg_blackmarket_prolog_r);
void __cdecl alg_blackmarket_prolog_r(ObjectMaster* obj)
{
	((void(*)(ObjectMaster*))alg_blackmarket_prolog_t.Target())(obj);
	BlackMarketObject = obj;
}

// Black Market Purchase "Trampoline"
static void __cdecl BlackMarketPurchase()
{
	if (BlackMarketObject && BlackMarketObject->Data2.BlackMarket)
	{
		LocationManager::getInstance().SendBlackMarketLocationCheck(BlackMarketObject->Data2.BlackMarket->MenuSelection);
		BlackMarketObject->Data2.BlackMarket->MenuSelection = 0;
		BlackMarketObject->Data2.BlackMarket->MenuOffset = 0;
	}
}
// End Black Market Purchase "Trampoline"

// Black Market Assets
static NJS_TEXANIM OrbsAnim[] = {
	//Padding
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 0, 0},
	// Not Padding
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 0, 0},
	//Padding
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 0, 0},
};

FunctionPointer(void, ReleaseTextureList, (NJS_TEXLIST* a1), 0x77F9F0);

static const int OrbsTexCount = 1;

static NJS_TEXNAME OrbsTexName[OrbsTexCount];
static NJS_TEXLIST OrbsTexList = { OrbsTexName, OrbsTexCount };

static TexPackInfo OrbsTexPacks[] = {
	{ "AP_ORBS", &OrbsTexList },
	{ nullptr, nullptr }, //Needs to end in a null entry to prevent the LoadTextures call from iterating past the packs
};

#pragma region ModelData
Sint32 cnk_Sphere_002_vtx[] = { 0x6970029, 0x1190000, 0xBDFC89F5u, 0x3F820479, 0xBF2AB993u, 0xBE4E8B12u, 0x3E928D00, 0xBF6FCAE4u, 0x3D4D29C6, 0x3F256202, 0xBF2AD35Cu, 0x3DA628F8, 0xBE927848u, 0xBF746B96u, 0x3DFF42BA, 0x3FB2CDB8, 0xBEACA901u, 0x3E52244D, 0x3F59F928, 0xBEF717B1u, 0x3CA25E33, 0x3EC0F308, 0xBF04E7C3u, 0x3CE37AAB, 0xBF2F7B37u, 0xBF3A41DEu, 0x3E4F7DA4, 0x3F9C30F6, 0xBF06A60Cu, 0x3E9B21FE, 0x3F1A2BBF, 0xBF3D142Cu, 0x3E8C7588, 0x3F6AF090, 0xBF203E59u, 0x3EE3925C, 0x3E03C1C3, 0xBF62F1C9u, 0x3EE538BA, 0x3F247B38, 0xBEF5B150u, 0x3F2B4DEE, 0xBE9C2BC0u, 0xBF2D7984u, 0x3EED1FCA, 0x3F928798, 0xBEB7ADAEu, 0x3F3897E6, 0x3EF7535D, 0xBEFE502Cu, 0x3F19F5A1, 0x3F5BB6BE, 0xBE8E7CFAu, 0x3F6C5D64, 0x3D9BDEDD, 0xBEC0BFC5u, 0x3E9CFF59, 0x3E9B7D68, 0xBE890892u, 0x3EF8D98C, 0xBF4BCAA3u, 0xBEB8A51Eu, 0x3F1844B1, 0x3F8A119D, 0xBD3652BEu, 0x3F6E695C, 0x3EBA7715, 0x3BF3AA9F, 0x3F1D6A66, 0x3F1EF988, 0xBE0B205Cu, 0x3F704CBF, 0xBEA92341u, 0xBDCA679Bu, 0x3EBA3AA1, 0x3FAF0E3F, 0xBDC5019Cu, 0x3F121924, 0x3F51A213, 0xBD7A93DAu, 0x3F0FB6E5, 0x3F530A46, 0x3E8C57E3, 0x3F604AF9, 0xBC6425C4u, 0x3EF6B4CF, 0x3EE08CD7, 0x3EBDD5A0, 0x3D68EB16, 0x3F344884, 0xBF31C8E0u, 0x3E17144F, 0x3C61038C, 0x3FBC8C07, 0xBE2212AAu, 0x3C7ABC4A, 0x3F7C9F49, 0xBE250DB4u, 0x3EF5CD13, 0x3F9385D7, 0x3E86F1ED, 0x3F380562, 0x3F010157, 0x3EF5316E, 0x3EE73D6B, 0x3F133FF4, 0x3EB0DAB3, 0x3F35D198, 0xBEBC7A9Bu, 0x3F199CDE, 0x3D9FC513, 0x3FB78D21, 0x3E41A87B, 0x3E343586, 0x3F6C71CD, 0x3EAE5BEA, 0x3E323C5F, 0x3F258F9C, 0x3F0AA008, 0x3E8BE77F, 0xBE91F05Au, 0x3F6B32B9, 0x3E85238E, 0x3EBBF518, 0x3EA5425C, 0x3EC6B9D6, 0xBF39FD76u, 0x3F112851, 0x3E3A6492, 0x3E61DAE0, 0x3D1A835C, 0x3E862C98, 0xBF74AA22u, 0x3E091682, 0x3E64CA1B, 0x3F718A3A, 0x3F0D4F25, 0x3EB9D0BE, 0x3E2ED760, 0x3F6A81D0, 0x3E221B79, 0x3FA068BF, 0x3ED463D8, 0x3E8E5F33, 0x3F22B4FB, 0x3F386099, 0xBA2FD790u, 0x3EB73728, 0x3ECCB5FF, 0x3A51879D, 0xBF3ABCE8u, 0x3F2F1D31, 0xBDE0EB23u, 0x3FAB0139, 0x3EAF920A, 0xBE47C996u, 0x3F4555C9, 0x3F1B3E07, 0xBE29AFF4u, 0x3F916C8E, 0x3F01665F, 0xBE84E24Au, 0x3EEE142A, 0x3F58AE97, 0xBE3F089Du, 0x3F586286, 0x3F1632AE, 0xBE87BBAFu, 0x3CB7E17E, 0x3F76C5FE, 0xBE5EDCCEu, 0x3F11EAF8, 0x3F02EE78, 0xBEAC9080u, 0xBED37CE8u, 0x3F589613, 0xBF01D48Bu, 0x3F658490, 0x3EBC2A93, 0xBF40B1B5u, 0x3DD88A61, 0x3F265995, 0xBE108F32u, 0x3E7437E0, 0x3E336886, 0xBE360145u, 0xBF6B9C0Eu, 0x3EB25E20, 0xBE6B7E52u, 0x3FB68851, 0x3DA4B2B1, 0xBEB80C6Au, 0x3F697ECF, 0x3E49E3A1, 0xBEE202C0u, 0x3F9F2E0C, 0x3E4A5E03, 0xBF2BFC59u, 0x3F2006D3, 0x3ECB7439, 0xBF21E923u, 0x3F72256A, 0x3DA4C82E, 0xBF792874u, 0x3E20EDB3, 0x3E2B78B8, 0xBF0A2D71u, 0x3F12A374, 0x3E676716, 0xBF539D7Bu, 0xBEBBF3C2u, 0x3EDA63C6, 0xBEC8D487u, 0x3EC5DDE0, 0x3E64B100, 0xBF15287Fu, 0xBF32A8A1u, 0x3ED54009, 0xBF082906u, 0x3F99E104, 0xBDE4BADEu, 0xBF50B2AEu, 0x3F11E9E9, 0xBDD2324Fu, 0xBEED3339u, 0x3F907D45, 0xBECABCF0u, 0xBF33436Du, 0x3ED711FE, 0xBF13C5DDu, 0xBF14888Cu, 0x3F075EFC, 0xBDC5840Cu, 0xBF63A184u, 0xBEE6D45Cu, 0xBD9FEB8Eu, 0xBE86969Cu, 0x3E757B50, 0xBD3AA5C1u, 0xBEDD1304u, 0xBF66E66Au, 0xBBD2D138u, 0xBE9863FBu, 0x3FB282F5, 0xBE112C3Cu, 0xBEF220D1u, 0x3F5D8825, 0xBE29DA7Eu, 0xBF182DF2u, 0x3F58668A, 0xBEAA1606u, 0xBF64D765u, 0x3C4A76C2, 0xBEE569CCu, 0xBED2589Au, 0x3ED194F0, 0xBEAC6D93u, 0xBF1B4084u, 0xBF230FACu, 0xBEF3ABB4u, 0xBEAE3E28u, 0x3F37DD3E, 0xBF170A6Du, 0xBF070337u, 0xBE284002u, 0xBF5565AEu, 0xBDA1345Eu, 0x3E54F1B0, 0xBE605DE8u, 0xBDCD0591u, 0xBF74D699u, 0xBE8C7A19u, 0xBE8418B2u, 0x3FA61D31, 0xBED6EC02u, 0xBEB785C1u, 0x3F394EF6, 0xBF16EB5Fu, 0xBD86B67Fu, 0x40150A18, 0x3FA672D5, 0xBE030138u, 0x3F7116E5, 0xBE9F3D29u, 0xBE542E48u, 0x3FB06443, 0x3F759C9E, 0xBE9A4B54u, 0xBF00E73Fu, 0xBF4F49B1u, 0xBE237326u, 0x3F970BB4, 0x3F929369, 0xBE737E3Fu, 0xBF535289u, 0xBF030C00u, 0xBCC9C91Cu, 0x4009D3FC, 0x3F7E4C2E, 0xBD4BDAA7u, 0x3F2A79BF, 0xBF3E8E72u, 0x3E36DC02, 0x3FCB8478, 0x3F604B61, 0x3E834E96, 0xBE31F896u, 0xBF7367B1u, 0x3E80ED81, 0x40019E18, 0x3F74E53C, 0x3EC52CFD, 0x3EEC31C5, 0xBF4C9ECEu, 0x3E6B540C, 0x3FA77910, 0x3F84A618, 0x3EAF1725, 0xBF230B7Au, 0xBF30E280u, 0x3EE2E263, 0x3FECFD20, 0x3F84311C, 0x3F2FEF23, 0x3E23E21E, 0xBF35656Cu, 0x3EDBDE0A, 0x3FC85B31, 0x3F82D2C7, 0x3F2F5C42, 0xBE5C622Fu, 0xBF322ED9u, 0x3F0656D2, 0x4000B1C5, 0x3FA172DA, 0x3F4AC0E3, 0x3EFBB6EC, 0xBEB954FDu, 0x3F0D263D, 0x3FBA29CD, 0x3FA3D98C, 0x3F58C0AA, 0xBECD3AFFu, 0xBEB32887u, 0x3EC65572, 0x400E34C1, 0x3FB16419, 0x3F1B2EF2, 0x3F47084F, 0xBE2B9722u, 0x3EBED896, 0x3F9AEFBD, 0x3FAC693D, 0x3F1F7DBB, 0xBF429512u, 0xBE3D289Eu, 0x3E3EB665, 0x401450DF, 0x3FA9CBE8, 0x3E9ABA48, 0x3F6A5337, 0xBE8845FFu, 0x3F204A4E, 0x3FEDF50A, 0x3FB0D4B9, 0x3F77DDD1, 0x3E44D99F, 0xBE23C5D0u, 0x3F1F0F4D, 0x3FC31BBD, 0x3FBCC7C1, 0x3F7394D4, 0xBE9D5C2Eu, 0x3C6BDA21, 0x3EF98A51, 0x400753B2, 0x3FCBA266, 0x3F43F1FA, 0x3F1D4E38, 0x3E43D03C, 0x3E1D8B53, 0x3F8C78E2, 0x3FAADA9A, 0x3E762F2F, 0xBF715AB8u, 0xBE6C834Fu, 0x3F152FE9, 0x3FEC0D7F, 0x3FDC5975, 0x3F67F2D9, 0x3E487DB3, 0x3EC0141C, 0x3F0613EC, 0x3FBB9D94, 0x3FE0B673, 0x3F51272B, 0xBECAA70Eu, 0x3ED6B32B, 0x3EA1FD23, 0x3F9A46BD, 0x3FDC9C2E, 0x3F06E1BD, 0xBF46D73Au, 0x3EB0B1E4, 0x3ED620DF, 0x3FE3D554, 0x3FFD13A8, 0x3F26B2DB, 0x3DD2EC60, 0x3F407D73, 0x3E49087F, 0x40129D5A, 0x3FD8A01C, 0x3EAB6BC9, 0x3F64310E, 0x3E9C705F, 0x3E9FBEF4, 0x400876E3, 0x3FEE520C, 0x3EFA8B78, 0x3F1ED401, 0x3F1CE574, 0x3E14BD3B, 0x3FEBDB78, 0x4006460D, 0x3E6643FF, 0x3E464459, 0x3F747826, 0x3E88F0CC, 0x3FBAE44A, 0x4001188E, 0x3EDB8AB7, 0xBEC20F82u, 0x3F51EE9A, 0xBD6E2328u, 0x3FFEE20D, 0x4004373B, 0xBDAD540Au, 0x3ED62A4E, 0x3F67843B, 0xBD9A6088u, 0x3FC3028A, 0x4006850B, 0xBDEFCCD0u, 0xBE9397F5u, 0x3F734B09, 0x3D93F870, 0x3FA186F1, 0x3FF7C6A6, 0x3D90FC42, 0xBF35957Du, 0x3F338A64, 0x3D5C3686, 0x3F8DE221, 0x3FD7D305, 0x3DA6D8EA, 0xBF70C707u, 0x3EA8D89E, 0xBD10C72Eu, 0x4010DEDA, 0x3FEA3E14, 0xBD2AD9DBu, 0x3F5593F1, 0x3F0CBC46, 0xBEBE05AEu, 0x3FDFEEF4, 0x4001862B, 0xBF08A569u, 0x3D8C5C21, 0x3F57C4B7, 0xBE8A47DEu, 0x4009E574, 0x3FF093F7, 0xBEE05BB7u, 0x3F279BA2, 0x3F1DAB32, 0xBF0DE374u, 0x3FE4FC2A, 0x3FEA4BE1, 0xBF5AC5A7u, 0x3DDD7863, 0x3F020840, 0xBEBBE910u, 0x3FB451B8, 0x3FF61DF9, 0xBF0DA1E8u, 0xBEEFED38u, 0x3F304F40, 0xBDBAAFC6u, 0x3F895E3B, 0x3FBF7E7C, 0xBE17F44Eu, 0xBF7D1DB4u, 0x3CA0723D, 0xBEA68B05u, 0x3F9C5105, 0x3FE24439, 0xBEF0418Cu, 0xBF4175F3u, 0x3EE9E85E, 0xBF02CB48u, 0x4004D43D, 0x3FD4B6D4, 0xBF4BCA4Du, 0x3F0940F5, 0x3E8FC34C, 0xBF15EEAAu, 0x3FB9DDC5, 0x3FCA81CD, 0xBF64C3AAu, 0xBED11988u, 0x3E3EABC6, 0xBD01EFA9u, 0x4016BAAD, 0x3FC69A45, 0xBD457C9Du, 0x3F7E00CB, 0x3DEB6F06, 0xBF27F03Fu, 0x3FD9D88E, 0x3FB6C12D, 0xBF7F1E2Eu, 0xBCA973F2u, 0xBDA480ACu, 0xBF17C192u, 0x3FFAEDA0, 0x3FAE9AC7, 0xBF66A78Fu, 0x3EC7005C, 0xBE4558A0u, 0xBEB62043u, 0x3F95E2E8, 0x3FBE3A87, 0xBF0DFD1Du, 0xBF54F5BAu, 0xBC9A72E9u, 0xBEAAADCAu, 0x4011F24C, 0x3FC20EBA, 0xBF024402u, 0x3F5C1DC5, 0x3D2C1617, 0xBF00D942u, 0x3FAD8EE1, 0x3FA496E2, 0xBF4438A7u, 0xBF0D2F9Cu, 0xBEA88506u, 0xBEFC6C77u, 0x3FD3E3BE, 0x3F8600E4, 0xBF3F5D3Fu, 0xBD95A126u, 0xBF2903B7u, 0xBEC2C855u, 0x40086F22, 0x3F91B7DD, 0xBF13EF55u, 0x3F1CF5F5, 0xBF09E4B6u, 0xBE29B23Du, 0x3FE2AF96, 0x3F5823F3, 0xBE77103Au, 0x3DCB9224, 0xBF772166u, 0x3BB8C496, 0x40162FF3, 0xBFDB59FEu, 0x3C73B6C8, 0x3F795827, 0xBE677A7Du, 0xBDE2C772u, 0x3FE89E52, 0xC00D34D5u, 0xBE4833EBu, 0x3E274173, 0xBF778D95u, 0xBE3B3941u, 0x3FA98411, 0xC0044FD7u, 0xBE8D792Cu, 0xBF17ED59u, 0xBF41856Fu, 0xBE3B17F8u, 0x3F928A83, 0xBFEB0633u, 0xBE839EA0u, 0xBF5E2FB7u, 0xBED99B92u, 0xBD942A8Du, 0x3FC34F74, 0xC00C83BFu, 0xBDD98459u, 0xBE868C51u, 0xBF758059u, 0x3E2B52B1, 0x3FF1B362, 0xC00B6566u, 0x3E88A22E, 0x3E8097DF, 0xBF6E30CAu, 0x3DBA70D1, 0x400D8FA3, 0xBFFBD414u, 0x3E19990B, 0x3F4568EE, 0xBF1E669Du, 0x3EA3DEB7, 0x4004354E, 0xC0005756u, 0x3F013962, 0x3F0C41D8, 0xBF2AC718u, 0x3E7B3A44, 0x3FB329F6, 0xC005F70Eu, 0x3EC5F72D, 0xBEE2DA2Cu, 0xBF4F0ECBu, 0x3E767EB6, 0x3F9E2469, 0xBFF866B3u, 0x3EBACD83, 0xBF3ED02Bu, 0xBF0ED65Fu, 0x3DC23C4E, 0x3F8D1B45, 0xBFDF4E8Fu, 0x3E1A518E, 0xBF72AD38u, 0xBE8F9B12u, 0x3EEB26C9, 0x3FDAB717, 0xC001C23Au, 0x3F32D0F2, 0xBC1B1F33u, 0xBF372E11u, 0x3F052F67, 0x3FFA9B3B, 0xBFED9300u, 0x3F5369DE, 0x3EBB7BF5, 0xBEDB91DEu, 0x3EB64280, 0x400E4E06, 0xBFDD1AA3u, 0x3F1057F4, 0x3F4A838D, 0xBE72F360u, 0x3F1539EA, 0x3FC2F178, 0xBFE65830u, 0x3F63C18C, 0xBE946D13u, 0xBEB49DF0u, 0x3D7DEF6C, 0x3F8A4303, 0xBFBA93BAu, 0x3DB63010, 0xBF7A134Cu, 0x3E472F6E, 0x3ED61426, 0x3F9F2715, 0xBFDB195Cu, 0x3F2C2143, 0xBF3586E2u, 0xBE59731Bu, 0x3F19CADC, 0x3FF8B8FC, 0xBFCC8964u, 0x3F7045D4, 0x3EAFA599, 0xBD197FDDu, 0x3F217037, 0x3FCAF0A8, 0xBFC752DBu, 0x3F7B3CFE, 0xBE405F78u, 0x3D21E669, 0x3E902557, 0x3F917231, 0xBFC2157Eu, 0x3EEBE1F0, 0xBF626419u, 0x3D9A7FEA, 0x3E48C37F, 0x40148002, 0xBFBBD326u, 0x3EA2D2AD, 0x3F6F56A0, 0x3E2142BA, 0x3F0DEBDC, 0x3FE17612, 0xBF9DF399u, 0x3F58D9D1, 0x3D8028E0, 0x3F071C7E, 0x3E86B05C, 0x3F9B1C22, 0xBFA2B802u, 0x3EC842D0, 0xBF44EBF5u, 0x3F0159E9, 0x3EE98731, 0x40086001, 0xBFB0BFF3u, 0x3F34D2F4, 0x3F238EAA, 0x3E9C0C1A, 0x3EFEBC9C, 0x3FAEB018, 0xBFAB2FE8u, 0x3F460ECD, 0xBF03EA93u, 0x3EBCC17C, 0x3EA78416, 0x3FFA2DF1, 0xBF8931DEu, 0x3EFB97BA, 0x3EC0496B, 0x3F492A7B, 0x3D2A6D11, 0x3FE50A8C, 0xBF6DEBE9u, 0x3D9E1518, 0x3E0CB651, 0x3F7CCCE5, 0x3E78CB0C, 0x3FC11EE4, 0xBF8063B4u, 0x3ECFB2B2, 0xBE93B4A4u, 0x3F5E0792, 0x3DE7E3D9, 0x400F0EC7, 0xBF9B7795u, 0x3E6D2E68, 0x3F496995, 0x3F127802, 0x3CFA9F6C, 0x3FAAF60C, 0xBF858E3Au, 0x3CB2946B, 0xBF127640u, 0x3F51E3CF, 0xBE4B5E34u, 0x3FDBF300, 0xBF757F76u, 0xBEA07AD3u, 0xBC91F782u, 0x3F730E9E, 0xBD951F2Eu, 0x400BF48A, 0xBF90D5AAu, 0xBDCE68E7u, 0x3F3347F1, 0x3F34E917, 0xBE2E9C72u, 0x3F9400CE, 0xBFA305E2u, 0xBE85F6CBu, 0xBF590F04u, 0x3EEC17C6, 0xBEC8D8ACu, 0x3FB3087B, 0xBF9294BCu, 0xBF0F1341u, 0xBEED3651u, 0x3F30100E, 0xBDC59821u, 0x40147D78, 0xBFB2640Cu, 0xBE2B7D9Du, 0x3F725CDC, 0x3E8CD456, 0xBEA2E212u, 0x4004022A, 0xBF8E74B5u, 0xBEF68532u, 0x3F0663A9, 0x3F33AC55, 0xBF039927u, 0x3FE38B5A, 0xBF95E3F1u, 0xBF4A4AB2u, 0x3DC877AF, 0x3F1ADFE0, 0xBEC2F94Cu, 0x400DE3C8, 0xBFB84B9Fu, 0xBF145B79u, 0x3F47FFF3, 0x3E6D86C5, 0xBF103322u, 0x4001DE11, 0xBFBEA59Au, 0xBF5D0058u, 0x3EF28B4D, 0x3E325335, 0xBF0EBDECu, 0x3FB337F6, 0xBFB151E1u, 0xBF5799D0u, 0xBEF6C18Au, 0x3E778D81, 0xBF272602u, 0x3FDB9EB7, 0xBFCA43CDu, 0xBF7FE939u, 0xBC82326Eu, 0xBCAC4BBFu, 0xBF0BE093u, 0x40021878, 0xBFE13AC4u, 0xBF51BF63u, 0x3EF87511, 0xBE9C5294u, 0xBE91DB63u, 0x401268BD, 0xBFD4D1F8u, 0xBEE06B98u, 0x3F623FF9, 0xBE279CB6u, 0xBEF7DC5Au, 0x3FAC5793, 0xBFE9DDA1u, 0xBF404CEFu, 0xBF0E3166u, 0xBEB69F27u, 0xBEE08E73u, 0x3FF08E38, 0xC0014ECFu, 0xBF27AD79u, 0x3E8827C0, 0xBF35116Cu, 0xBF00FE40u, 0x3FD1AD8B, 0xBFFEDE88u, 0xBF42B945u, 0xBDFA340Du, 0xBF233822u, 0xBE663911u, 0x3F8D01E3, 0xBFCD5C07u, 0xBEC2EF8Cu, 0xBF6CAA4Au, 0xBCA1EF63u, 0xBE4F378Bu, 0x400925BE, 0xC001C75Du, 0xBE9C11A1u, 0x3F281BD8, 0xBF309886u, 0xBE0D729Fu, 0x40938520, 0xBF227985u, 0xBE59A022u, 0x3EBA682B, 0xBF6823E4u, 0x3E679744, 0x4085B1BD, 0xBF1FED66u, 0x3EA5084E, 0xBEA74F76u, 0xBF637099u, 0x3D6A50FC, 0x4097952F, 0xBF13829Au, 0x3DCF4A1B, 0x3F1D1631, 0xBF48786Eu, 0xBCDC6D4Bu, 0x407BD625, 0xBF0CA411u, 0xBCD83DF4u, 0xBF24C99Eu, 0xBF43CB54u, 0x3E6C71DD, 0x408FAD4D, 0xBF25F724u, 0x3EC49163, 0x3E3BF66C, 0xBF67A9F2u, 0x3E4B4F34, 0x40770632, 0xBECB930Au, 0x3EB48506, 0xBF41411Bu, 0xBF0D91CDu, 0x3EB0A1C5, 0x4097E81C, 0xBEDF0672u, 0x3F0F0412, 0x3F169131, 0xBF15B4D3u, 0x3B2B31DC, 0x406E832A, 0xBE486359u, 0xBC42AAD2u, 0xBF78B373u, 0xBE727913u, 0x3EE9D281, 0x40859F86, 0xBEF885F3u, 0x3F3837AC, 0xBE8CF3BDu, 0xBF233245u, 0x3F1A0748, 0x4090753C, 0xBE744FB7u, 0x3F6BA96F, 0x3E5462B3, 0xBEA9790Eu, 0x3F0815E6, 0x4097A163, 0xBD24266Du, 0x3F521A64, 0x3F120109, 0x3D0B082B, 0x3EC31989, 0x40767E77, 0xBE1839F6u, 0x3F19BADC, 0xBF46E4DEu, 0xBE41ABD4u, 0x3E925776, 0x409E07A4, 0xBE09598Eu, 0x3EE627C0, 0x3F61E0A8, 0xBE0EAFB2u, 0x3F20ECB1, 0x408AF2B4, 0x3DC1A77A, 0x3F77DFBE, 0xBC37A16Du, 0x3E7FB1DD, 0x3F165B10, 0x40828E1A, 0xBD8C3B84u, 0x3F68B87C, 0xBED43D40u, 0xBD2C1E43u, 0x3ECE002F, 0x4079F068, 0x3E20C440, 0x3F236092, 0xBF300DF4u, 0x3EB12F89, 0x3EDE96C3, 0x40858142, 0x3ECB4694, 0x3F3436D7, 0xBE8D7B6Cu, 0x3F277EB1, 0x3EDC2A59, 0x40940B19, 0x3EB3B99A, 0x3F3065A0, 0x3EC49396, 0x3F1D5A02, 0x3E0FA5C7, 0x4076669A, 0x3EA0BDF1, 0x3E74F011, 0xBF46A8A7u, 0x3F1566F7, 0x3E93934C, 0x409B7A34, 0x3E77951A, 0x3EEDE6DF, 0x3F44FDCA, 0x3EE054B5, 0x3E2D36CD, 0x406F5886, 0x3ABF7040, 0x3E8FD41B, 0xBF749E8Cu, 0x3DB76DE2, 0x3D857663, 0x40A002B8, 0xBD809854u, 0x3DDCD073, 0x3F7E7642, 0x3C9A4B35, 0x3E6CC4B3, 0x408D9E2E, 0x3F0C02BC, 0x3EB76614, 0x3DCC46B6, 0x3F6DA529, 0x3E6A7E4C, 0x40839EE8, 0x3F001623, 0x3EA1D0DD, 0xBED05C7Du, 0x3F5B665D, 0x3D5AC9E0, 0x409578E0, 0x3F046C94, 0x3DB588E1, 0x3EF5A8D0, 0x3F5F7582, 0x3D6085D6, 0x409D67AC, 0x3E90F087, 0x3D998E09, 0x3F5B1180, 0x3F030F44, 0xBE50BA93u, 0x408DAB9E, 0x3F114C31, 0xBEADF7B0u, 0x3DE22F6E, 0x3F6F1A7A, 0xBE152888u, 0x4085E0F2, 0x3F10F7D2, 0xBE6B3F40u, 0xBE90054Eu, 0x3F6E8510, 0xBE26255Du, 0x4079A1CA, 0x3EC4B413, 0xBE845B2Bu, 0xBF306A0Fu, 0x3F2D4DF5, 0xBD9172CAu, 0x406FE35A, 0x3E060924, 0xBDE21122u, 0xBF74B7C8u, 0x3E8B4AF1, 0xBEA19347u, 0x40977F5C, 0x3EC420AD, 0xBEF1E6BBu, 0x3F0F67B8, 0x3F2E3075, 0xBEFBE024u, 0x409722D8, 0x3E31AF57, 0xBF418664u, 0x3F0D18DD, 0x3EB4D6CE, 0xBF132255u, 0x408BA057, 0x3E89244D, 0xBF5CF1D5u, 0x3C7ECB0C, 0x3F013E10, 0xBF069F10u, 0x40834773, 0x3E7F79C8, 0xBF495F67u, 0xBECC6E84u, 0x3EF1237F, 0xBE54AF94u, 0x409ECF2A, 0x3DAB1BDC, 0xBEA45BB5u, 0x3F6C95CE, 0x3E540A27, 0xBEA760D7u, 0x4073EA32, 0x3D8334C8, 0xBF0038DEu, 0xBF58AB4Eu, 0x3E397413, 0xBECEA19Eu, 0x409B9253, 0xBDDCF847u, 0xBF1F7ED0u, 0x3F46569F, 0xBDDC6AE5u, 0xBF1BE2D7u, 0x40933B88, 0xBD9F7176u, 0xBF6D5B94u, 0x3EBDCAC0, 0xBD5DBCC5u, 0xBF24AF9Eu, 0x408AB7FC, 0xBE5754F8u, 0xBF7825FEu, 0xBD73B07Fu, 0xBE742D41u, 0xBF087274u, 0x407F3629, 0xBE05A931u, 0xBF555E64u, 0xBF0A3965u, 0xBDF083A3u, 0xBEE83F58u, 0x408D5D14, 0xBF02E47Cu, 0xBF347BE7u, 0x3D81456F, 0xBF34D522u, 0xBEA98FF7u, 0x407675A2, 0xBE9662B5u, 0xBEF652CDu, 0xBF4A808Fu, 0xBEC17EA7u, 0xBD6D52E7u, 0x409EC113, 0xBE99FC21u, 0xBD6FD679u, 0x3F6BA8C2, 0xBEC5BF6Eu, 0xBECE5670u, 0x4095249E, 0xBEF40F46u, 0xBF218758u, 0x3EEB726D, 0xBF1FF488u, 0xBEBDD1A5u, 0x408309CB, 0xBF044A70u, 0xBF16508Eu, 0xBED10AEAu, 0xBF32EEB0u, 0xBE7C30D9u, 0x409BC2FF, 0xBEBEC1FBu, 0xBEC5B9B1u, 0x3F4769F3, 0xBEFCF3ECu, 0xBE2BF81Au, 0x4088EF2A, 0xBF2D20F5u, 0xBE67189Au, 0xBDF2C333u, 0xBF778AE7u, 0xBE145DBDu, 0x40814C54, 0x3F982F91, 0xBE48C956u, 0x3F5F8B48, 0xBEE46C7Du, 0xBE129B83u, 0x40766F5F, 0x3F770F78, 0xBE515073u, 0x3F10CE8F, 0xBF4C8548u, 0xBE35DD4Fu, 0x405DB1AD, 0x3F58E1E7, 0xBE835C26u, 0xBD0068B5u, 0xBF774D07u, 0xBDA36062u, 0x403EDA30, 0x3F8944FA, 0xBDEB11AFu, 0xBF4053E0u, 0xBF266193u, 0x3DE4C93F, 0x406E5838, 0x3F63EA6A, 0x3E25870A, 0x3EBEA2C3, 0xBF69F62Eu, 0x3D1AA43F, 0x404DC0DE, 0x3F61C40F, 0x3DB7E597, 0xBED2122Cu, 0xBF685355u, 0x3E673283, 0x407C38CA, 0x3F8AA188, 0x3EBC0300, 0x3F361475, 0xBF197247u, 0x3EA02406, 0x40626FF7, 0x3F66A653, 0x3EFEE950, 0x3D93273D, 0xBF5D40A8u, 0x3DDD1067, 0x40398E98, 0x3F9AAE45, 0x3E46615C, 0xBF62D4C4u, 0xBED7A10Cu, 0x3F074450, 0x4072E8D0, 0x3FA1F6A7, 0x3F4E19B0, 0x3EEB3E31, 0xBEC014EBu, 0x3ECC4230, 0x40483DA0, 0x3F8E9625, 0x3F1BC591, 0xBF0B9A7Cu, 0xBF139660u, 0x3F11C215, 0x40579AE1, 0x3F977865, 0x3F638888, 0xBE2744F1u, 0xBEDB3BEDu, 0x3E2789A5, 0x40375374, 0x3FC6AA50, 0x3E81DAEB, 0xBF75D837u, 0x3DED6E79, 0x3F143AF0, 0x40708362, 0x3FBBC3B1, 0x3F6BAD53, 0x3EC7AACF, 0x3CA1D67D, 0x3EC4C3FD, 0x403DBCDF, 0x3FB527F9, 0x3F222980, 0xBF44401Eu, 0xBDD77036u, 0x3ECA14AC, 0x407F2D9A, 0x3FBFD971, 0x3F1C5D1D, 0x3F4A61C2, 0x3D34FF38, 0x3F231647, 0x405C5DAB, 0x3FC90AD1, 0x3F7EC828, 0xBD83CE5Du, 0x3D95D3AA, 0x3E3C5C24, 0x40834748, 0x3FB4178B, 0x3E964BE7, 0x3F732B52, 0xBDDC2DA3u, 0x3F106BE8, 0x40627C0A, 0x3FE74909, 0x3F59CEC3, 0x3DCB6C3F, 0x3F041877, 0x3F0B7348, 0x404B63C6, 0x3FD320FB, 0x3F583AE3, 0xBEF341FCu, 0x3E7C91F3, 0x3EB59B00, 0x4079D524, 0x3FE9D36A, 0x3F0FF824, 0x3F21DC1B, 0x3F086B5D, 0x3E8BCC25, 0x403ECD31, 0x3FE508FC, 0x3ED67F05, 0xBF44715Cu, 0x3EF88C62, 0x3DBC103A, 0x40809FDB, 0x3FE9C5E8, 0x3E2B271E, 0x3F57707A, 0x3F037ED6, 0x3EADEE8E, 0x405FF752, 0x4001E035, 0x3F076CE1, 0x3D1FFBF6, 0x3F590422, 0x3E9ABC2F, 0x404B6301, 0x3FFA7D44, 0x3EF52283, 0xBEE799C4u, 0x3F409F6B, 0xBD843EA4u, 0x404ABDF0, 0x4002CFD2, 0xBDC50CBEu, 0xBEFC2EC8u, 0x3F5D6D84, 0x3CA1823C, 0x406FAD15, 0x40050ADD, 0x3D0097C3, 0x3ED20E93, 0x3F695322, 0x3CDC8DB0, 0x405BA6E3, 0x400817AE, 0x3D25099F, 0xBDABE1E1u, 0x3F7EE362, 0xBE0A5D49u, 0x40807B2C, 0x3FE8B5AE, 0xBE440640u, 0x3F537BD7, 0x3F07AE0C, 0xBEAE98C6u, 0x405EF88F, 0x40020711, 0xBEF6E5B7u, 0x3CB27A9A, 0x3F603305, 0xBDBD2D9Bu, 0x403BC984, 0x3FE908A1, 0xBE097723u, 0xBF53F6E5u, 0x3F0B6096, 0xBEAAB804u, 0x4077053C, 0x3FF1C373, 0xBF05823Au, 0x3F0AF461, 0x3F288832, 0xBF0D3027u, 0x4063554D, 0x3FEAC495, 0xBF5604A9u, 0x3DF4AEB7, 0x3F0919EC, 0xBED4296Cu, 0x404E3CA9, 0x3FF3F900, 0xBF1EC35Au, 0xBED26D75u, 0x3F2B0E79, 0xBEE16A1Au, 0x4043D7AC, 0x3FD9EB1C, 0xBF284569u, 0xBF299D23u, 0x3EB7DE8E, 0xBE8F4B88u, 0x403992AC, 0x3FC62383, 0xBEE746E1u, 0xBF62C712u, 0x3DD8FC04, 0xBDA485C4u, 0x40360605, 0x3FC27B54, 0xBDB71839u, 0xBF7EAC36u, 0x3D468F3E, 0xBEC6C66Eu, 0x407FC12C, 0x3FCF5203, 0xBF1B4DA5u, 0x3F42A9A2, 0x3E6D6E49, 0xBF21B9BEu, 0x406745D2, 0x3FCB0537, 0xBF75CDAFu, 0x3E6ECAD5, 0x3E1D9F71, 0xBF16690Eu, 0x404E1402, 0x3FCA0317, 0xBF6ACA6Au, 0xBEBA5048u, 0x3E266D8E, 0xBEE2F70Eu, 0x407D0C25, 0x3FB592BB, 0xBF34AA41u, 0x3F327BAE, 0xBE00FDC6u, 0xBF22570Cu, 0x4060EEF0, 0x3FA43909, 0xBF72D977u, 0x3D438E19, 0xBEA0225Du, 0xBF04DF19u, 0x4046D47B, 0x3FADF3B1, 0xBF4AF2CAu, 0xBF12C978u, 0xBE53B7D3u, 0xBED1175Bu, 0x4066A78E, 0x3F7BF628, 0xBF237344u, 0x3E274B20, 0xBF4089AFu, 0xBED1429Cu, 0x4077C72C, 0x3F938F92, 0xBF24E4A2u, 0x3F16C127, 0xBEF9F472u, 0xBEC43418u, 0x4049C4F4, 0x3F874656, 0xBF174248u, 0xBEF265E1u, 0xBF273C28u, 0xBDF7FEA2u, 0x4083DEB3, 0x3FBDD00A, 0xBE29AE47u, 0x3F7C7239, 0x3C2EB244, 0xBE68699Du, 0x403A71D4, 0x3FA3BEBD, 0xBEB8F23Du, 0xBF613C9Cu, 0xBE9E274Du, 0xBE226A24u, 0x4080DA50, 0xBFF26C77u, 0xBE82C6F8u, 0x3F5824D3, 0xBEF12E8Au, 0xBE375D57u, 0x4046B38A, 0xC00532B1u, 0xBE7F7EFDu, 0xBF06F92Cu, 0xBF4FF030u, 0xBDFB5A0Au, 0x4039BD32, 0xBFEBFA9Du, 0xBE35A954u, 0xBF6458C2u, 0xBED4E57Fu, 0xBD0744ABu, 0x40726F5A, 0xC0093C58u, 0xBD05D55Au, 0x3EF2AE31, 0xBF6142DAu, 0x3E0DEE5C, 0x40465C39, 0xC0055904u, 0x3E65CD08, 0xBF1433E4u, 0xBF48AD6Du, 0x3E151777, 0x403A3960, 0xBFEB9ABEu, 0x3E644AD9, 0xBF614154u, 0xBED6D658u, 0x3E0C1405, 0x407E7E93, 0xBFFA4F39u, 0x3E75F062, 0x3F436663, 0xBF198A36u, 0x3E2001C3, 0x405A3952, 0xC00DAAF8u, 0x3E706619, 0xBDC3E77Bu, 0xBF77A337u, 0x3EC05EE9, 0x406DC00D, 0xC0037AF8u, 0x3F15D133, 0x3EB134FF, 0xBF3BB94Au, 0x3EF92620, 0x4053C080, 0xBFFC0E0Bu, 0x3F437809, 0xBE765BF9u, 0xBF1968F1u, 0x3EDADB81, 0x407AE028, 0xBFE45444u, 0x3F2B4504, 0x3F2DDCF6, 0xBE9A9676u, 0x3D80EEEE, 0x40836850, 0xBFDB5137u, 0x3DDCE732, 0x3F7A0FC1, 0xBE3D6E6Au, 0x3F21948A, 0x4062CFBC, 0xBFDB491Au, 0x3F783A8C, 0x3DDEE47A, 0xBE60390Eu, 0x3ED32DE3, 0x4042B42E, 0xBFEAF95Fu, 0x3F2B97F0, 0xBF257400u, 0xBEBABAA7u, 0x3F1EF370, 0x40533CDC, 0xBFBD527Au, 0x3F72D6C1, 0xBE91CD4Du, 0x3E0D7669, 0x3F0AF444, 0x40733D86, 0xBFB561C0u, 0x3F571318, 0x3EF22C27, 0x3E87E5D7, 0x3EFF0628, 0x405EE1A4, 0xBF96285Au, 0x3F47874F, 0x3CB013B3, 0x3F204B31, 0x3E989A74, 0x4039C710, 0xBFC71DF5u, 0x3F01326F, 0xBF5C99D8u, 0x3D5645FF, 0x3E96A64C, 0x4081051A, 0xBFB56884u, 0x3EF2ED7E, 0x3F57F7E8, 0x3E80B051, 0x3ED53122, 0x40449E7C, 0xBFA4BB33u, 0x3F28C1A2, 0xBF1D9971u, 0x3EDD15EE, 0x3DA52816, 0x4082F93D, 0xBFB6136Au, 0x3DDA071E, 0x3F77D7C8, 0x3E681BD4, 0x3E4E2FB1, 0x404DA6A4, 0xBF8194DAu, 0x3EAB347D, 0xBEC7C254u, 0x3F5B9E56, 0xBD7BEC5Eu, 0x4080C104, 0xBF9D3D2Bu, 0xBD9A76ABu, 0x3F52DF21, 0x3F0FDCC3, 0x3E5594B7, 0x4074757E, 0xBF87AEC3u, 0x3EA3B1D7, 0x3F071FB5, 0x3F4970F4, 0x3E36AE3E, 0x40633995, 0xBF745560u, 0x3E72452E, 0x3DECA2D8, 0x3F76F783, 0x3D66CCFC, 0x403B75F3, 0xBF9DBB8Cu, 0x3DD809C5, 0xBF57A24Au, 0x3F074F4F, 0xBE08BA75u, 0x404A83ED, 0xBF816BA4u, 0xBE4CD289u, 0xBEEADBD5u, 0x3F5DA3DE, 0xBEA434EFu, 0x4062B789, 0xBF814006u, 0xBEE7AAB9u, 0x3DBE4CCB, 0x3F630D66, 0xBE9F5181u, 0x40744F9A, 0xBF8DA18Fu, 0xBEE27614u, 0x3F06DAE6, 0x3F39D1D2, 0xBECF095Au, 0x404EB6DB, 0xBF90D944u, 0xBF230FC3u, 0xBEBCFC0Au, 0x3F2D41E8, 0xBBBC98BEu, 0x4034FAFE, 0xBFC984A2u, 0xBA51C825u, 0xBF7FFB61u, 0x3C42312C, 0xBE5AC849u, 0x4039FF3E, 0xBFAE784Cu, 0xBEA3A9C7u, 0xBF5F826Eu, 0x3EBC8018, 0xBF14A484u, 0x406AC472, 0xBFAA5B92u, 0xBF615655u, 0x3EA181A0, 0x3EB5870C, 0xBEE16A1Au, 0x4043887F, 0xBFAD43C6u, 0xBF31143Cu, 0xBF229F70u, 0x3EAFDF80, 0xBF23BB17u, 0x405A6DB6, 0xBFB486BCu, 0xBF76359Bu, 0xBDCE48C0u, 0x3E826A5B, 0xBE90EBEBu, 0x4081AB88, 0xBFBA5E82u, 0xBEE2429Fu, 0x3F615831, 0x3E30F8AB, 0xBEFE9810u, 0x40798E4E, 0xBFD6260Fu, 0xBF45BE83u, 0x3F1F590A, 0xBE011704u, 0xBF1FD93Cu, 0x405E7746, 0xBFE2C56Cu, 0xBF75DDE0u, 0x3D96A68B, 0xBE899052u, 0xBEAEFB03u, 0x403B452A, 0xBFCC0950u, 0xBF097842u, 0xBF57A552u, 0xBD39E0A0u, 0xBF1233F6u, 0x404D089E, 0xBFE14DA5u, 0xBF5D7C51u, 0xBEE0104Fu, 0xBE7AB9F0u, 0xBEF8CCF0u, 0x405D6629, 0xC0011E56u, 0xBF3ABF15u, 0xBCEE9F42u, 0xBF2EF239u, 0xBECA994Du, 0x40752BB0, 0xBFF9F94Au, 0xBF1D1D05u, 0x3F05BB65, 0xBF178C94u, 0xBEBDAADCu, 0x4044195F, 0xBFF75CDCu, 0xBF11F158u, 0xBF1DEBBAu, 0xBF0AEA92u, 0xBE828F08u, 0x40630A98, 0xC00B7C4Cu, 0xBEBA4A7Cu, 0x3DAD7D99, 0xBF6D7709u, 0xFF, 0x0 };

Sint16 cnk_Sphere_002_poly[] = { 0x2513, 0x4, 0xFFFFu, 0xFFFFu, 0xFFFFu, 0xFF, 0x8, 0x6000, 0x1041, 0x8F6, 0x61, 0xFFF5u, 0x28, 0x94, 0xCE, 0x24, 0x9A, 0xD6, 0x2D, 0x93, 0xD3, 0x25, 0x96, 0xD8, 0x0, 0x8F, 0xDB, 0x29, 0x98, 0xDF, 0x2B, 0x93, 0xE3, 0x2A, 0x96, 0xEB, 0x3, 0x8D, 0xEC, 0x2C, 0x8B, 0xF4, 0x9, 0x86, 0xEF, 0x7, 0x2C, 0x8B, 0xF4, 0x27, 0x96, 0xF3, 0x2A, 0x96, 0xEB, 0x26, 0x9B, 0xE8, 0x29, 0x98, 0xDF, 0x21, 0x9B, 0xDE, 0x24, 0x9A, 0xD6, 0xFFF1u, 0xF, 0x67, 0xC6, 0x12, 0x76, 0xCD, 0x1F, 0x6A, 0xCD, 0x19, 0x71, 0xD1, 0x20, 0x6A, 0xD5, 0x1A, 0x71, 0xD8, 0x1D, 0x6C, 0xDE, 0x1B, 0x71, 0xDF, 0x1C, 0x70, 0xE7, 0x13, 0x76, 0xE5, 0x18, 0x73, 0xED, 0x14, 0x79, 0xED, 0x1E, 0x6F, 0xF3, 0x15, 0x7D, 0xF4, 0x2C, 0x7E, 0xFA, 0x8, 0x59, 0x36, 0xD0, 0x5C, 0x35, 0xD6, 0x57, 0x39, 0xDA, 0x5B, 0x35, 0xE1, 0x56, 0x3A, 0xE0, 0x5A, 0x38, 0xE9, 0x54, 0x3B, 0xE7, 0x58, 0x3A, 0xEF, 0xFFF2u, 0x95, 0x64, 0x38, 0xB1, 0x67, 0x32, 0xAB, 0x6F, 0x36, 0xAA, 0x6E, 0x2E, 0xA0, 0x75, 0x30, 0xA5, 0x75, 0x27, 0x9E, 0x79, 0x25, 0xA4, 0x75, 0x1F, 0x9F, 0x79, 0x19, 0xA6, 0x73, 0x18, 0xA1, 0x79, 0x11, 0xA7, 0x74, 0xF, 0x9A, 0x82, 0xE, 0xA3, 0x80, 0x8, 0xFFF2u, 0xE1, 0x29, 0x38, 0xC9, 0x1C, 0x34, 0xC5, 0x2A, 0x31, 0xCB, 0x21, 0x2E, 0xC7, 0x26, 0x28, 0xC8, 0x24, 0x22, 0xC4, 0x28, 0x1E, 0xC6, 0x23, 0x17, 0xC3, 0x29, 0x13, 0xCE, 0x23, 0xB, 0xBD, 0x31, 0xE, 0xEB, 0x1E, 0x9, 0xE5, 0x39, 0x12, 0xE2, 0x3B, 0xC, 0xFFF0u, 0xE6, 0x5, 0x22, 0xE3, 0x6, 0x1B, 0xE4, 0x6, 0x25, 0xDD, 0xA, 0x1D, 0xDE, 0xC, 0x26, 0xDA, 0xE, 0x1F, 0xD6, 0x11, 0x27, 0xD8, 0x12, 0x20, 0xD5, 0x17, 0x27, 0xD4, 0x17, 0x1F, 0xCF, 0x1B, 0x1D, 0xD1, 0x19, 0x14, 0xCA, 0x20, 0x18, 0xCC, 0x1F, 0x11, 0xC6, 0x23, 0x17, 0xCE, 0x23, 0xB, 0xA, 0xCC, 0x1F, 0x11, 0xCE, 0x23, 0xB, 0xD1, 0x19, 0x14, 0xD3, 0x14, 0x10, 0xD7, 0x13, 0x19, 0xD9, 0xF, 0x10, 0xDC, 0xC, 0x15, 0xE2, 0x8, 0x11, 0xDD, 0xA, 0x1D, 0xE3, 0x6, 0x1B, 0xFFFBu, 0xCE, 0x23, 0xB, 0xD3, 0x14, 0x10, 0xEB, 0x1E, 0x9, 0xD9, 0xF, 0x10, 0xE2, 0x8, 0x11, 0xFFFAu, 0xDD, 0xA, 0x1D, 0xDC, 0xC, 0x15, 0xDA, 0xE, 0x1F, 0xD7, 0x13, 0x19, 0xD8, 0x12, 0x20, 0xD4, 0x17, 0x1F, 0xA, 0xE3, 0x3B, 0x1C, 0xE5, 0x39, 0x12, 0xE6, 0x38, 0x1E, 0xE9, 0x35, 0x15, 0xE8, 0x33, 0x1C, 0xBE, 0x2F, 0x15, 0xBF, 0x2F, 0x1F, 0xC1, 0x2C, 0x19, 0xC4, 0x28, 0x1E, 0xC3, 0x29, 0x13, 0xA, 0xE4, 0x3B, 0x27, 0xE6, 0x38, 0x1E, 0xE7, 0x38, 0x29, 0xEA, 0x33, 0x27, 0xEC, 0x34, 0x30, 0xC0, 0x2F, 0x2D, 0xC5, 0x2A, 0x31, 0xC2, 0x2C, 0x26, 0xC7, 0x26, 0x28, 0xC4, 0x28, 0x1E, 0xFFF8u, 0xC5, 0x2A, 0x31, 0xEC, 0x34, 0x30, 0xE1, 0x18, 0x36, 0xE0, 0x10, 0x30, 0xDB, 0x10, 0x2F, 0xDF, 0x9, 0x2A, 0xDE, 0xC, 0x26, 0xE4, 0x6, 0x25, 0xFFFBu, 0xC4, 0x28, 0x1E, 0xBF, 0x2F, 0x1F, 0xC2, 0x2C, 0x26, 0xEA, 0x33, 0x27, 0xC0, 0x2F, 0x2D, 0x4, 0xE4, 0x6, 0x25, 0xE7, 0x5, 0x2C, 0xDF, 0x9, 0x2A, 0xE0, 0x10, 0x30, 0xFFFDu, 0xE0, 0x30, 0x31, 0xEC, 0x34, 0x30, 0xE7, 0x38, 0x29, 0x4, 0xBF, 0x2F, 0x1F, 0xEA, 0x33, 0x27, 0xE8, 0x33, 0x1C, 0xE6, 0x38, 0x1E, 0xD, 0x5E, 0xE5, 0xC7, 0x88, 0xC5, 0xCD, 0x80, 0xCE, 0xCA, 0x83, 0xC8, 0xD0, 0x7D, 0xD1, 0xD2, 0x81, 0xCD, 0xD6, 0x78, 0xD3, 0xDD, 0x7C, 0xD0, 0xDF, 0x7B, 0xD3, 0xEA, 0x7F, 0xCC, 0xE7, 0x7E, 0xCE, 0xF0, 0x85, 0xC7, 0xE7, 0x8C, 0xE2, 0xF4, 0xFFE6u, 0x51, 0x21, 0xF8, 0x4B, 0x17, 0xF3, 0x3F, 0x27, 0xF2, 0x42, 0x1C, 0xED, 0x3A, 0x24, 0xED, 0x3D, 0x21, 0xE4, 0x38, 0x24, 0xE6, 0x3C, 0x23, 0xDD, 0x36, 0x28, 0xE3, 0x35, 0x28, 0xDD, 0x33, 0x2A, 0xD8, 0x37, 0x25, 0xD8, 0x39, 0x23, 0xD2, 0x3E, 0x20, 0xD6, 0x44, 0x1B, 0xCF, 0x45, 0x1A, 0xD5, 0x4C, 0x14, 0xD0, 0x48, 0x14, 0xD9, 0x4E, 0x10, 0xD5, 0x4D, 0x10, 0xDF, 0x4F, 0xC, 0xDE, 0x50, 0xF, 0xE7, 0x54, 0x9, 0xE6, 0x52, 0xE, 0xED, 0x58, 0x9, 0xEF, 0x51, 0x1A, 0xF5, 0xE, 0x35, 0x28, 0xDD, 0x37, 0x25, 0xD8, 0x3C, 0x23, 0xDD, 0x3E, 0x20, 0xD6, 0x40, 0x1E, 0xDD, 0x45, 0x1A, 0xD5, 0x43, 0x1B, 0xDE, 0x46, 0x17, 0xDD, 0x47, 0x19, 0xE6, 0x49, 0x14, 0xE4, 0x4A, 0x16, 0xEC, 0x52, 0xE, 0xED, 0x4B, 0x17, 0xF3, 0x51, 0x1A, 0xF5, 0xC, 0xA3, 0x89, 0x7, 0x9A, 0x82, 0xE, 0xB8, 0x90, 0xC, 0x94, 0x87, 0x15, 0x90, 0x8D, 0x15, 0x92, 0x8B, 0x1D, 0x8E, 0x90, 0x1A, 0xBC, 0x90, 0x22, 0xB6, 0x95, 0x1F, 0xBA, 0x94, 0x27, 0xB4, 0x9A, 0x21, 0xB5, 0x9A, 0x2A, 0xFFF5u, 0x28, 0x78, 0xCE, 0x1F, 0x6A, 0xCD, 0x24, 0x66, 0xD6, 0x20, 0x6A, 0xD5, 0x21, 0x68, 0xDD, 0x1D, 0x6C, 0xDE, 0x22, 0x6A, 0xE6, 0x1C, 0x70, 0xE7, 0x23, 0x6B, 0xEC, 0x18, 0x73, 0xED, 0x1E, 0x6F, 0xF3, 0xFFF9u, 0x21, 0x68, 0xDD, 0x22, 0x6A, 0xE6, 0x26, 0x66, 0xE8, 0x23, 0x6B, 0xEC, 0x27, 0x6F, 0xF3, 0x1E, 0x6F, 0xF3, 0x2C, 0x72, 0xFA, 0xFFF8u, 0xA3, 0x98, 0x5, 0xB0, 0x6F, 0xC, 0xB8, 0x90, 0xC, 0xB2, 0x9B, 0x11, 0xBB, 0x94, 0x11, 0xB9, 0x95, 0x18, 0x8E, 0x90, 0x1A, 0xB6, 0x95, 0x1F, 0xFFFBu, 0xB2, 0x9B, 0x11, 0xB3, 0x9B, 0x1A, 0xB9, 0x95, 0x18, 0xB4, 0x9A, 0x21, 0xB6, 0x95, 0x1F, 0xFFF6u, 0xE1, 0x18, 0x36, 0xDB, 0x10, 0x2F, 0xC9, 0x1C, 0x34, 0xD2, 0x18, 0x2D, 0xCB, 0x21, 0x2E, 0xD0, 0x1D, 0x27, 0xC8, 0x24, 0x22, 0xCD, 0x1E, 0x20, 0xC6, 0x23, 0x17, 0xCA, 0x20, 0x18, 0xFFFDu, 0x29, 0x98, 0xDF, 0x25, 0x96, 0xD8, 0x24, 0x9A, 0xD6, 0xFFFBu, 0x52, 0xE, 0xED, 0x50, 0xF, 0xE7, 0x49, 0x14, 0xE4, 0x4D, 0x10, 0xDF, 0x48, 0x14, 0xD9, 0x7, 0x3C, 0x23, 0xDD, 0x40, 0x1E, 0xDD, 0x3D, 0x21, 0xE4, 0x41, 0x1E, 0xE6, 0x42, 0x1C, 0xED, 0x47, 0x19, 0xE6, 0x4A, 0x16, 0xEC, 0x4, 0x47, 0x19, 0xE6, 0x41, 0x1E, 0xE6, 0x43, 0x1B, 0xDE, 0x40, 0x1E, 0xDD, 0x4, 0x45, 0x1A, 0xD5, 0x48, 0x14, 0xD9, 0x46, 0x17, 0xDD, 0x49, 0x14, 0xE4, 0xFFFDu, 0x42, 0x1C, 0xED, 0x4B, 0x17, 0xF3, 0x4A, 0x16, 0xEC, 0x12, 0x6D, 0xF2, 0xF9, 0x8C, 0xE2, 0xF4, 0x68, 0xE9, 0xF4, 0x61, 0xF2, 0xF0, 0x67, 0xE8, 0xED, 0x60, 0xF0, 0xEA, 0x66, 0xEA, 0xE7, 0x62, 0xEE, 0xE4, 0x63, 0xEB, 0xDB, 0x5F, 0xEF, 0xDD, 0x8D, 0xF1, 0xD3, 0x8A, 0xF4, 0xDB, 0x87, 0xF8, 0xD7, 0x8B, 0xF5, 0xE1, 0x86, 0xFA, 0xDF, 0x89, 0xF7, 0xE9, 0x85, 0xFB, 0xEA, 0x8C, 0xF2, 0xF1, 0x5, 0x86, 0xFA, 0xDF, 0x84, 0xFA, 0xD7, 0x87, 0xF8, 0xD7, 0x83, 0xFB, 0xD2, 0x88, 0xF8, 0xCD, 0xFFF9u, 0x8C, 0xF2, 0xF1, 0x61, 0xF2, 0xF0, 0x89, 0xF7, 0xE9, 0x60, 0xF0, 0xEA, 0x8B, 0xF5, 0xE1, 0x62, 0xEE, 0xE4, 0x5F, 0xEF, 0xDD, 0xC, 0x87, 0xF8, 0xD7, 0x88, 0xF8, 0xCD, 0x8D, 0xF1, 0xD3, 0x5E, 0xE2, 0xC8, 0x64, 0xEB, 0xD0, 0x6B, 0xE3, 0xD0, 0x65, 0xE8, 0xD5, 0x6A, 0xE4, 0xD9, 0x69, 0xE6, 0xDF, 0x6C, 0xE3, 0xE4, 0x66, 0xEA, 0xE7, 0x67, 0xE8, 0xED, 0x5, 0x8D, 0xF1, 0xD3, 0x64, 0xEB, 0xD0, 0x63, 0xEB, 0xDB, 0x65, 0xE8, 0xD5, 0x69, 0xE6, 0xDF, 0x6, 0x54, 0x9, 0xE6, 0x4F, 0xC, 0xDE, 0x56, 0x9, 0xE1, 0x53, 0xB, 0xD7, 0x57, 0x8, 0xD8, 0x59, 0x11, 0xD0, 0xFFFAu, 0x4F, 0xC, 0xDE, 0x53, 0xB, 0xD7, 0x4E, 0x10, 0xD5, 0x59, 0x11, 0xD0, 0x4C, 0x14, 0xD0, 0x55, 0x24, 0xC9, 0xFFF4u, 0x55, 0x24, 0xC9, 0x59, 0x11, 0xD0, 0x2E, 0x31, 0xCC, 0x5C, 0x35, 0xD6, 0x31, 0x2F, 0xD5, 0x5D, 0x30, 0xDF, 0x33, 0x2A, 0xD8, 0x32, 0x2C, 0xE3, 0x36, 0x28, 0xE3, 0x34, 0x2A, 0xEA, 0x38, 0x24, 0xE6, 0x3A, 0x24, 0xED, 0xFFFAu, 0x3A, 0x24, 0xED, 0x34, 0x2A, 0xEA, 0x3F, 0x27, 0xF2, 0x30, 0x32, 0xEE, 0x51, 0x1A, 0xF5, 0x58, 0x3A, 0xEF, 0xFFF9u, 0x58, 0x3A, 0xEF, 0x30, 0x32, 0xEE, 0x5A, 0x38, 0xE9, 0x2F, 0x31, 0xE8, 0x5B, 0x35, 0xE1, 0x5D, 0x30, 0xDF, 0x5C, 0x35, 0xD6, 0x5, 0x5D, 0x30, 0xDF, 0x32, 0x2C, 0xE3, 0x2F, 0x31, 0xE8, 0x34, 0x2A, 0xEA, 0x30, 0x32, 0xEE, 0xFFFDu, 0x63, 0xEB, 0xDB, 0x66, 0xEA, 0xE7, 0x69, 0xE6, 0xDF, 0xFFF8u, 0x5E, 0xE2, 0xC8, 0x6B, 0xE3, 0xD0, 0x72, 0xDB, 0xCB, 0x75, 0xDC, 0xD4, 0x7A, 0xD5, 0xCF, 0x77, 0xD7, 0xD9, 0x7D, 0xD1, 0xD2, 0x78, 0xD3, 0xDD, 0x5, 0x7D, 0xD1, 0xD2, 0x7A, 0xD5, 0xCF, 0x80, 0xCE, 0xCA, 0x72, 0xDB, 0xCB, 0x5E, 0xCE, 0xC5, 0xFFF4u, 0x2C, 0x8D, 0xF5, 0x15, 0x7D, 0xF4, 0x9, 0x86, 0xEF, 0xE, 0x7F, 0xED, 0xB, 0x82, 0xE5, 0x11, 0x7B, 0xE6, 0xD, 0x7C, 0xE0, 0x16, 0x76, 0xDD, 0x10, 0x7C, 0xD7, 0x17, 0x76, 0xD4, 0x12, 0x76, 0xCD, 0x19, 0x71, 0xD1, 0x8, 0x15, 0x7D, 0xF4, 0xE, 0x7F, 0xED, 0x14, 0x79, 0xED, 0x11, 0x7B, 0xE6, 0x13, 0x76, 0xE5, 0x16, 0x76, 0xDD, 0x1B, 0x71, 0xDF, 0x1A, 0x71, 0xD8, 0x4, 0x16, 0x76, 0xDD, 0x17, 0x76, 0xD4, 0x1A, 0x71, 0xD8, 0x19, 0x71, 0xD1, 0xFFFAu, 0x83, 0xC8, 0xD0, 0x81, 0xCD, 0xD6, 0x84, 0xC6, 0xD7, 0x82, 0xCA, 0xDE, 0x86, 0xC5, 0xE0, 0x85, 0xC7, 0xE7, 0xFFFBu, 0x81, 0xCD, 0xD6, 0x7C, 0xD0, 0xDF, 0x82, 0xCA, 0xDE, 0x7F, 0xCC, 0xE7, 0x85, 0xC7, 0xE7, 0xFFFDu, 0x8B, 0xF5, 0xE1, 0x5F, 0xEF, 0xDD, 0x8A, 0xF4, 0xDB, 0x10, 0xF8, 0xCA, 0x6, 0x110, 0xCF, 0xE, 0x101, 0xD7, 0xB, 0x103, 0xD2, 0x10, 0xFF, 0xDC, 0x10, 0x104, 0xD6, 0x18, 0xFC, 0xDD, 0x18, 0xFD, 0xDA, 0x20, 0xFB, 0xDF, 0x25, 0x100, 0xDB, 0x2B, 0xFA, 0xE4, 0x2C, 0xFE, 0xDF, 0x32, 0xF2, 0xE8, 0x32, 0x10B, 0xDD, 0x37, 0xEF, 0xEF, 0x32, 0x113, 0xD2, 0x31, 0xFFF8u, 0xA3, 0x80, 0x8, 0xA7, 0x74, 0xF, 0xB0, 0x6F, 0xC, 0xAC, 0x6C, 0x16, 0xAD, 0x68, 0x16, 0xAE, 0x69, 0x20, 0xB3, 0x64, 0x19, 0xB4, 0x64, 0x22, 0x4, 0xB3, 0x64, 0x19, 0xAD, 0x68, 0x16, 0xB2, 0x64, 0x11, 0xB0, 0x6F, 0xC, 0xFFF8u, 0xA7, 0x74, 0xF, 0xA6, 0x73, 0x18, 0xAC, 0x6C, 0x16, 0xA8, 0x6F, 0x1F, 0xAE, 0x69, 0x20, 0xAF, 0x69, 0x28, 0xB4, 0x64, 0x22, 0xB5, 0x64, 0x2B, 0x6, 0xA6, 0x73, 0x18, 0xA8, 0x6F, 0x1F, 0xA4, 0x75, 0x1F, 0xA9, 0x70, 0x25, 0xA5, 0x75, 0x27, 0xAA, 0x6E, 0x2E, 0x5, 0xB5, 0x64, 0x2B, 0xB1, 0x67, 0x32, 0xAF, 0x69, 0x28, 0xAA, 0x6E, 0x2E, 0xA9, 0x70, 0x25, 0xE, 0x101, 0xD7, 0xB, 0xFF, 0xDC, 0x10, 0xF8, 0xE7, 0xB, 0xF7, 0xE3, 0x14, 0xF3, 0xE9, 0x11, 0xF5, 0xE7, 0x1A, 0xF0, 0xEC, 0x18, 0xF4, 0xEA, 0x22, 0x118, 0xEF, 0x1E, 0xEE, 0xEF, 0x2A, 0x115, 0xF2, 0x20, 0x117, 0xF3, 0x2B, 0x114, 0xF6, 0x28, 0x113, 0xEF, 0x31, 0x4, 0x8E, 0x90, 0x1A, 0xBB, 0x94, 0x11, 0x90, 0x8D, 0x15, 0xB8, 0x90, 0xC, 0xFFFAu, 0xC1, 0x2C, 0x19, 0xC3, 0x29, 0x13, 0xBE, 0x2F, 0x15, 0xBD, 0x31, 0xE, 0xE9, 0x35, 0x15, 0xE5, 0x39, 0x12, 0xA, 0x6D, 0xD8, 0xF6, 0x68, 0xE9, 0xF4, 0x71, 0xDE, 0xF1, 0x6E, 0xE3, 0xED, 0x76, 0xDC, 0xE8, 0x70, 0xDF, 0xE2, 0x73, 0xDB, 0xDE, 0x6F, 0xE0, 0xD9, 0x75, 0xDC, 0xD4, 0x6B, 0xE3, 0xD0, 0xFFFAu, 0x6B, 0xE3, 0xD0, 0x6A, 0xE4, 0xD9, 0x6F, 0xE0, 0xD9, 0x6C, 0xE3, 0xE4, 0x70, 0xDF, 0xE2, 0x6E, 0xE3, 0xED, 0x8, 0x75, 0xDC, 0xD4, 0x77, 0xD7, 0xD9, 0x73, 0xDB, 0xDE, 0x79, 0xD6, 0xE4, 0x76, 0xDC, 0xE8, 0x74, 0xD8, 0xEE, 0x71, 0xDE, 0xF1, 0x6D, 0xD4, 0xF6, 0x4, 0x68, 0xE9, 0xF4, 0x67, 0xE8, 0xED, 0x6E, 0xE3, 0xED, 0x6C, 0xE3, 0xE4, 0x8, 0x77, 0xD7, 0xD9, 0x78, 0xD3, 0xDD, 0x79, 0xD6, 0xE4, 0x7B, 0xD3, 0xEA, 0x74, 0xD8, 0xEE, 0x7E, 0xCE, 0xF0, 0x6D, 0xD4, 0xF6, 0x8C, 0xE2, 0xF4, 0xFFF7u, 0xCA, 0x20, 0x18, 0xCD, 0x1E, 0x20, 0xCF, 0x1B, 0x1D, 0xD0, 0x1D, 0x27, 0xD5, 0x17, 0x27, 0xD2, 0x18, 0x2D, 0xD6, 0x11, 0x27, 0xDB, 0x10, 0x2F, 0xDE, 0xC, 0x26, 0xFFFDu, 0xD4, 0x17, 0x1F, 0xD7, 0x13, 0x19, 0xD1, 0x19, 0x14, 0xFFFDu, 0xE2, 0x8, 0x11, 0xE3, 0x6, 0x1B, 0xE5, 0x5, 0x12, 0xC, 0xFF, 0xDC, 0x10, 0xFC, 0xDD, 0x18, 0xF7, 0xE3, 0x14, 0xF9, 0xE2, 0x1F, 0xF5, 0xE7, 0x1A, 0xF6, 0xE5, 0x24, 0xF4, 0xEA, 0x22, 0xF1, 0xEA, 0x2A, 0xEE, 0xEF, 0x2A, 0xEF, 0xEF, 0x32, 0x117, 0xF3, 0x2B, 0x113, 0xEF, 0x31, 0xFFF8u, 0xEF, 0xEF, 0x32, 0xF2, 0xE8, 0x32, 0xF1, 0xEA, 0x2A, 0xFA, 0xE4, 0x2C, 0xF6, 0xE5, 0x24, 0xFB, 0xDF, 0x25, 0xF9, 0xE2, 0x1F, 0xFC, 0xDD, 0x18, 0xFFFAu, 0x4C, 0x14, 0xD0, 0x55, 0x18, 0xCA, 0x44, 0x1B, 0xCF, 0x3B, 0x27, 0xCE, 0x39, 0x23, 0xD2, 0x33, 0x2A, 0xD8, 0x5, 0x33, 0x2A, 0xD8, 0x31, 0x2F, 0xD5, 0x3B, 0x27, 0xCE, 0x2E, 0x31, 0xCC, 0x55, 0x25, 0xC8, 0xFFF4u, 0x95, 0x7D, 0x3B, 0xAB, 0x6F, 0x36, 0xA2, 0x7E, 0x36, 0xA0, 0x75, 0x30, 0x9D, 0x7C, 0x2D, 0x9E, 0x79, 0x25, 0x9C, 0x80, 0x28, 0x9B, 0x7E, 0x21, 0x97, 0x83, 0x1C, 0x98, 0x80, 0x16, 0x94, 0x87, 0x15, 0x9A, 0x82, 0xE, 0xFFF8u, 0x94, 0x87, 0x15, 0x92, 0x8B, 0x1D, 0x97, 0x83, 0x1C, 0x96, 0x86, 0x25, 0x9C, 0x80, 0x28, 0x99, 0x82, 0x2F, 0x9D, 0x7C, 0x2D, 0xA2, 0x7E, 0x36, 0xFFF7u, 0xA2, 0x7E, 0x36, 0x99, 0x82, 0x2F, 0x95, 0x88, 0x37, 0x93, 0x89, 0x30, 0x91, 0x8F, 0x2C, 0x96, 0x86, 0x25, 0x8F, 0x8B, 0x25, 0x92, 0x8B, 0x1D, 0xBC, 0x90, 0x22, 0xFFF9u, 0x8F, 0x8B, 0x25, 0xBC, 0x90, 0x22, 0x91, 0x8F, 0x2C, 0xBA, 0x94, 0x27, 0xB7, 0x96, 0x30, 0xB5, 0x9A, 0x2A, 0xB1, 0x9C, 0x32, 0xFFFDu, 0x96, 0x86, 0x25, 0x93, 0x89, 0x30, 0x99, 0x82, 0x2F, 0x6, 0x9A, 0x82, 0xE, 0xA1, 0x79, 0x11, 0x98, 0x80, 0x16, 0x9F, 0x79, 0x19, 0x9B, 0x7E, 0x21, 0x9E, 0x79, 0x25, 0x4, 0xB1, 0x9C, 0x32, 0xB7, 0x96, 0x30, 0x95, 0x88, 0x37, 0x91, 0x8F, 0x2C, 0xFFF2u, 0x1F, 0x72, 0xCB, 0x28, 0x78, 0xCE, 0xF, 0x8A, 0xCA, 0x2D, 0x93, 0xD3, 0x2, 0x8A, 0xCF, 0x4, 0x8A, 0xD5, 0xC, 0x81, 0xD0, 0x7, 0x86, 0xD8, 0xA, 0x81, 0xDA, 0x8, 0x84, 0xDF, 0xB, 0x82, 0xE5, 0x6, 0x87, 0xE4, 0x9, 0x86, 0xEF, 0x3, 0x8D, 0xEC, 0xFFF9u, 0xB, 0x82, 0xE5, 0xD, 0x7C, 0xE0, 0xA, 0x81, 0xDA, 0x10, 0x7C, 0xD7, 0xC, 0x81, 0xD0, 0x12, 0x76, 0xCD, 0xF, 0x8A, 0xCA, 0xFFFAu, 0x2D, 0x93, 0xD3, 0x0, 0x8F, 0xDB, 0x4, 0x8A, 0xD5, 0x5, 0x8A, 0xDE, 0x7, 0x86, 0xD8, 0x8, 0x84, 0xDF, 0x6, 0x8, 0x84, 0xDF, 0x6, 0x87, 0xE4, 0x5, 0x8A, 0xDE, 0x1, 0x8D, 0xE5, 0x0, 0x8F, 0xDB, 0x2B, 0x93, 0xE3, 0x4, 0x6, 0x87, 0xE4, 0x3, 0x8D, 0xEC, 0x1, 0x8D, 0xE5, 0x2B, 0x93, 0xE3, 0xFFFDu, 0x2, 0x8A, 0xCF, 0xC, 0x81, 0xD0, 0xF, 0x8A, 0xCA, 0xFFFDu, 0xAF, 0x69, 0x28, 0xA8, 0x6F, 0x1F, 0xA9, 0x70, 0x25, 0xFFF7u, 0x100, 0xDB, 0x2B, 0xFE, 0xDF, 0x32, 0x106, 0xD5, 0x30, 0x10B, 0xDD, 0x37, 0x10C, 0xCE, 0x32, 0x113, 0xD2, 0x31, 0x10E, 0xCB, 0x2C, 0x114, 0xC7, 0x29, 0x10F, 0xC9, 0x22, 0x9, 0x100, 0xDB, 0x2B, 0xFD, 0xDA, 0x20, 0x102, 0xD6, 0x26, 0x105, 0xD6, 0x1F, 0x107, 0xD1, 0x28, 0x108, 0xD0, 0x1F, 0x10A, 0xCE, 0x27, 0x10F, 0xC9, 0x22, 0x10E, 0xCB, 0x2C, 0xFFFAu, 0xFD, 0xDA, 0x20, 0x105, 0xD6, 0x1F, 0x104, 0xD6, 0x18, 0x109, 0xCF, 0x17, 0x103, 0xD2, 0x10, 0x110, 0xCF, 0xE, 0x6, 0x100, 0xDB, 0x2B, 0x102, 0xD6, 0x26, 0x106, 0xD5, 0x30, 0x107, 0xD1, 0x28, 0x10C, 0xCE, 0x32, 0x10E, 0xCB, 0x2C, 0xFFFDu, 0x10A, 0xCE, 0x27, 0x107, 0xD1, 0x28, 0x10E, 0xCB, 0x2C, 0xFFFAu, 0x105, 0xD6, 0x1F, 0x108, 0xD0, 0x1F, 0x109, 0xCF, 0x17, 0x10D, 0xCA, 0x1B, 0x110, 0xCF, 0xE, 0x111, 0xC7, 0x14, 0x4, 0x108, 0xD0, 0x1F, 0x10D, 0xCA, 0x1B, 0x10F, 0xC9, 0x22, 0x111, 0xC7, 0x14, 0xFFFBu, 0x111, 0xF7, 0x15, 0x10F, 0xF8, 0x20, 0x112, 0xF6, 0x20, 0x114, 0xF6, 0x28, 0x115, 0xF2, 0x20, 0xFFF9u, 0x115, 0xF2, 0x20, 0x118, 0xEF, 0x1E, 0x116, 0xF2, 0x17, 0xF0, 0xEC, 0x18, 0xED, 0xF0, 0x10, 0xF3, 0xE9, 0x11, 0xF8, 0xE7, 0xB, 0xFFF9u, 0xF8, 0xE7, 0xB, 0x110, 0xCF, 0xE, 0xED, 0xF0, 0x10, 0x111, 0xF7, 0x15, 0x116, 0xF2, 0x17, 0x112, 0xF6, 0x20, 0x115, 0xF2, 0x20, 0xFF };

NJS_CNK_MODEL cnk_Sphere_002 = { cnk_Sphere_002_vtx, cnk_Sphere_002_poly, { -0.0034564398f, 2.5901022f, -0.022793133f }, 2.436549f };

NJS_OBJECT Orbs = { NJD_EVAL_UNIT_POS | NJD_EVAL_UNIT_ANG | NJD_EVAL_UNIT_SCL | NJD_EVAL_BREAK, &cnk_Sphere_002, 0, 0, 0, 0, 0, 0, 1, 1, 1, NULL, NULL };
#pragma endregion

void APIconObject_Delete(ObjectMaster* obj)
{
	ChaoGardenManager::GetInstance().ReleaseAPTextures();
	ChaoGardenManager::GetInstance().apIconObjPtr = nullptr;
}

void APIconObject_Main(ObjectMaster* obj)
{
	if (GameState != GameStates_LoadFinished && GameState != GameStates_LoadLevel)
	{
		return;
	}

	if (obj->Data1.Entity->Action == 0)
	{
		obj->DeleteSub = APIconObject_Delete;
		obj->Data1.Entity->Action = 1;
	}
}
// End Black Market Assets


void ChaoGardenManager::OnInitFunction(const char* path, const HelperFunctions& helperFunctions)
{
	this->_helperFunctions = &helperFunctions;
	this->_archipelagoManager = &ArchipelagoManager::getInstance();

}

void ChaoGardenManager::OnFrameFunction()
{
	if (!this->_archipelagoManager->IsInit() || !this->_archipelagoManager->IsAuth())
	{
		//Make No Characters have Chao Garden Access
		WriteData<8>((void*)0x1DEF829, 0x00);

		return;
	}

	//Make All Characters have Chao Garden Access
	WriteData<8>((void*)0x1DEF829, 0x01);

	if (!this->_chaoEnabled)
	{
		return;
	}

	// Make sure Hero/Dark Gardens are always unlocked
	ChaoGardensUnlocked = 0x56;

	// Remove Hero/Dark Race restrictions
	WriteData<2>((void*)0x531774, '\x90');
	WriteData<2>((void*)0x5314CF, '\x90');

	// Handle Separate Chao Saves
	std::string chaoFileName = ArchipelagoManager::getInstance().GetSeedNameAndPlayer().substr(0, 12);

	for (int i = 0; i < 12; i++)
	{
		WriteData<1>((void*)(0x8ACF4B + i), chaoFileName[i]);
		WriteData<1>((void*)(0xC70E5C + i), chaoFileName[i]);
		WriteData<1>((void*)(0x1366067 + i), chaoFileName[i]);
	}

	if (CurrentLevel != LevelIDs::LevelIDs_ChaoWorld)
	{
		return;
	}

	// Prevent Game Overs in Chao Garden
	if (Life_Count[0] < 3)
	{
		Life_Count[0] = 3;
	}

	this->HandleStartingEggs();
	this->HandleSubsequentEggs();

	// Handle Time Scale
	ChaoGardenTimescale = 120.0f / this->_timescale;

	// Black Market
	if (this->_blackMarketSlots > 0)
	{
		this->HandleBlackMarket();
	}
	// End Black Market

	// Entrance Randomization
	if (this->_chaoERData.size() > 0)
	{
		this->HandleChaoER();
	}
	// End Entrance Randomization

	if (GameState == GameStates::GameStates_Pause)
	{
		return;
	}

	this->_timer++;

	if (this->_timer < CGM_MEMORY_CHECK_TIME)
	{
		return;
	}

	this->_timer = 0;
}

void ChaoGardenManager::OnInputFunction()
{
	if (!this->_archipelagoManager->IsInit() || !this->_archipelagoManager->IsAuth())
	{
		return;
	}

	if (!this->_chaoEnabled)
	{
		return;
	}

	if (CurrentLevel != LevelIDs::LevelIDs_ChaoWorld)
	{
		return;
	}

	if (GameState == GameStates::GameStates_Pause)
	{
		return;
	}

	Uint32 PressedButtons = ControllersRaw->press;
	if ((PressedButtons & 0b100000) != 0) // Down
	{
		switch (this->_timescale)
		{
		case 2:
			this->_timescale = 1;
			break;
		case 5:
			this->_timescale = 2;
			break;
		case 10:
			this->_timescale = 5;
			break;
		case 15:
			this->_timescale = 10;
			break;
		}
	}
	else if ((PressedButtons & 0b10000) != 0) // Up
	{
		switch (this->_timescale)
		{
		case 1:
			this->_timescale = 2;
			break;
		case 2:
			this->_timescale = 5;
			break;
		case 5:
			this->_timescale = 10;
			break;
		case 10:
			this->_timescale = 15;
			break;
		}
	}
}

void ChaoGardenManager::HandleBlackMarket()
{
	if (CurrentLevel != LevelIDs::LevelIDs_ChaoWorld ||
		CurrentChaoArea != 0x06)
	{
		BlackMarketObject = nullptr;
	}

	// Write jump at first 5 bytes here to function handling sending location check
	WriteCall(static_cast<void*>((void*)0x58AFD5), &BlackMarketPurchase);
	WriteData<3>((void*)0x58AFDA, '\x90');
	WriteData<5>((void*)0x58AFDF, '\x90');

	WriteData<3>((void*)0x58B090, '\x90');

	// Make all "objects" use the 0 Texture Index
	WriteData<1>((void*)0x58A527, '\x33');
	WriteData<1>((void*)0x58A528, '\xC0');
	WriteData<1>((void*)0x58A529, '\x90');
	WriteData<1>((void*)0x5892C8, '\x33');
	WriteData<1>((void*)0x5892C9, '\xD2');
	WriteData<2>((void*)0x5892CA, '\x90');

	// Make it possible to buy Black Market items with a full inventory
	WriteData<1>((void*)0x58AF91, '\x06');

	// Handle AP Model and Texture
	if (!this->apIconObjPtr && (GameState == GameStates_Ingame || GameState == GameStates_Pause))
	{
		LoadAPTextures();
		this->apIconObjPtr = LoadObject(0, "APIconModel", APIconObject_Main, LoadObj_Data1 | LoadObj_Data2);
		this->apIconObjPtr->DeleteSub = APIconObject_Delete;
		this->apIconObjPtr->MainSub = APIconObject_Main;
		this->apIconObjPtr->Data1.Entity->Action = 1;
	}
	// End Handle AP Model and Texture

	if (CurrentChaoArea == 0x06 && BlackMarketObject != nullptr && BlackMarketObject->Data2.BlackMarket != nullptr)
	{
		unsigned int textAddress = (int)(BlackMarketObject->Data2.BlackMarket->textPtr);

		std::vector<int> ActiveMarketSlots = LocationManager::getInstance().GetAvailableBlackMarketLocations();
		int ItemCount = min(10, ActiveMarketSlots.size());
		BlackMarketItemCount = ItemCount;

		for (int i = 0; i < ItemCount; i++)
		{
			int SlotIdx = ActiveMarketSlots[i];

			BlackMarketInventory[i].Category = ChaoItemCategory::ChaoItemCategory_Egg;
			BlackMarketInventory[i].Type = i;

			BlackMarketEggStock[i].NameTextIndex = this->_NameStringIndeces[i];
			BlackMarketEggStock[i].DescTextIndex = this->_DescStringIndeces[i];
			if (this->_blackMarketData.find((SlotIdx * 46) + 42) != this->_blackMarketData.end())
			{
				BlackMarketEggStock[i].Cost = this->_blackMarketData[(SlotIdx * 46) + 42];
			}
			// Hopefully handle Model stuff here

			// Item Names
			std::string newName = "";
			for (int chr_idx = 0; chr_idx < 26; chr_idx++)
			{
				if (this->_blackMarketData.find((SlotIdx * 46) + chr_idx) != this->_blackMarketData.end())
				{
					newName += this->_blackMarketData[(SlotIdx * 46) + chr_idx];
				}
			}

			for (int j = 0; j < newName.length(); j++)
			{
				int writeAddr = textAddress;
				writeAddr += this->_NameStringOffsets[i];
				writeAddr += j;
				WriteData<1>((void*)writeAddr, newName[j]);
			}
			int writeAddr = textAddress + this->_NameStringOffsets[i] + newName.length();
			WriteData<1>((void*)writeAddr, '\x00');
			// End Item Names

			// Item Descriptions
			std::string newDesc = "for ";
			for (int chr_idx = 0; chr_idx < 16; chr_idx++)
			{
				if (this->_blackMarketData.find((SlotIdx * 46) + 26 + chr_idx) != this->_blackMarketData.end())
				{
					newDesc += this->_blackMarketData[(SlotIdx * 46) + 26 + chr_idx];
				}
			}
			newDesc += ".";

			for (int j = 0; j < newDesc.length(); j++)
			{
				int writeAddr = textAddress + this->_DescStringOffsets[i] + j;
				WriteData<1>((void*)writeAddr, newDesc[j]);
			}
			writeAddr = textAddress + this->_DescStringOffsets[i] + newDesc.length();
			WriteData<1>((void*)writeAddr, '\x00');
			// End Item Descriptions
		}

		if (ItemCount == 0)
		{
			BlackMarketInventory[0].Category = ChaoItemCategory::ChaoItemCategory_Fruit;
			BlackMarketInventory[0].Type = 1;
			BlackMarketItemCount = 1;
		}
	}
}

void ChaoGardenManager::HandleStartingEggs()
{
	if (ChaoEggsRandomized != 0b1111)
	{
		for (int chaoIdx = 0; chaoIdx < 24; chaoIdx++)
		{
			ChaoDataBase chaoData = ChaoSlots[chaoIdx].data;

			if (chaoData.Type != ChaoType::ChaoType_Egg)
			{
				continue;
			}

			if (chaoData.Garden != CurrentChaoArea)
			{
				continue;
			}

			if (this->_defaultEggMap.find(chaoIdx) != this->_defaultEggMap.end())
			{
				switch (CurrentChaoArea)
				{
				case 0x01:
					// Neutral Garden
					if ((ChaoEggsRandomized & 0b11) == 0b11)
					{
						continue;
					}
					else if ((ChaoEggsRandomized & 0b11) == 0b01)
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b11;
					}
					else
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b01;
					}
					break;
				case 0x02:
					// Hero Garden
					if ((ChaoEggsRandomized & 0b100) == 0b100)
					{
						continue;
					}
					else
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b100;
					}
					break;
				case 0x03:
					// Dark Garden
					if ((ChaoEggsRandomized & 0b1000) == 0b1000)
					{
						continue;
					}
					else
					{
						ChaoEggsRandomized = ChaoEggsRandomized | 0b1000;
					}
					break;
				}

				// Starting Chao Names
				for (int i = 0; i < 7; i++)
				{
					ChaoSlots[chaoIdx].data.Name[i] = (char)this->_defaultChaoNameMap[i + (chaoIdx * 7)];
				}

				// Starting Chao Colors
				unsigned char color = this->_defaultEggMap[chaoIdx];

				if (color != 255)
				{
					bool twoTone = false, shiny = false, jewel = false;

					if (color == 0)
					{
						twoTone = true;
					}

					if (color > 13)
					{
						color -= 13;
						twoTone = true;
					}

					if (color > 13)
					{
						color -= 14;
						twoTone = false;
						shiny = true;
					}

					if (color > 13)
					{
						color -= 13;
						twoTone = false;
						shiny = false;
						jewel = true;
					}

					if (jewel)
					{
						ChaoSlots[chaoIdx].data.Texture = color;
					}
					else
					{
						ChaoSlots[chaoIdx].data.MonotoneHighlights = !twoTone;
						ChaoSlots[chaoIdx].data.Color = color;
						ChaoSlots[chaoIdx].data.Shiny = shiny;
					}
					ChaoSlots[chaoIdx].data.EggColor = color;
				}
			}
		}
	}
}

void ChaoGardenManager::HandleSubsequentEggs()
{
	if (ChaoNamesUsed == 0)
	{
		ChaoNamesUsed = 4;
	}

	if (ChaoNamesUsed > this->_namesUsed)
	{
		this->_namesUsed = ChaoNamesUsed;
	}

	if (this->_namesUsed >= 30)
	{
		return;
	}

	for (int chaoIdx = 0; chaoIdx < 24; chaoIdx++)
	{
		ChaoDataBase chaoData = ChaoSlots[chaoIdx].data;

		if (chaoData.Type != ChaoType::ChaoType_Egg)
		{
			continue;
		}

		if (chaoData.Garden != CurrentChaoArea)
		{
			continue;
		}

		bool emptyName = true;
		for (int i = 0; i < 7; i++)
		{
			if (chaoData.Name[i] != 0x00)
			{
				emptyName = false;
				break;
			}
		}

		if (!emptyName)
		{
			continue;
		}

		for (int i = 0; i < 7; i++)
		{
			ChaoSlots[chaoIdx].data.Name[i] = (char)this->_defaultChaoNameMap[i + (this->_namesUsed * 7)];
		}

		this->_namesUsed++;
		ChaoNamesUsed++;
	}
}

void ChaoGardenManager::HandleChaoER()
{
	if (!this->_archipelagoManager->IsInit() || !this->_archipelagoManager->IsAuth())
	{
		return;
	}

	if (!this->_chaoEnabled)
	{
		return;
	}

	if (CurrentLevel != LevelIDs::LevelIDs_ChaoWorld)
	{
		return;
	}

	for (int exit = 0; exit < 0x14; exit++)
	{
		if (this->_chaoERData.find(exit) != this->_chaoERData.end())
		{
			int destination = this->_chaoERData[exit];

			switch (exit)
			{
			case ChaoExit::CE_LobbyNeutral:
				WriteData<1>((void*)0x57F79B, (char)destination);
				break;
			case ChaoExit::CE_LobbyHero:
				WriteData<1>((void*)0x57F967, (char)destination);
				break;
			case ChaoExit::CE_LobbyDark:
				WriteData<1>((void*)0x57FDB8, (char)destination);
				break;
			case ChaoExit::CE_LobbyKindergarten:
				WriteData<1>((void*)0x57EF1B, (char)destination);
				break;
			case ChaoExit::CE_NeutralLobby:
				if (CurrentChaoArea == 0x01)
				{
					WriteData<1>((void*)0x55AC06, (char)destination);
				}
				break;
			case ChaoExit::CE_NeutralCave:
				WriteData<1>((void*)0x55ACD6, (char)destination);
				break;
			case ChaoExit::CE_NeutralTransporter:
				if (CurrentChaoArea == 0x01)
				{
					WriteData<1>((void*)0x57D9E2, (char)destination);
				}
				break;
			case ChaoExit::CE_HeroLobby:
				if (CurrentChaoArea == 0x02)
				{
					WriteData<1>((void*)0x55AC06, (char)destination);
				}
				break;
			case ChaoExit::CE_HeroTransporter:
				if (CurrentChaoArea == 0x02)
				{
					WriteData<1>((void*)0x57D9E2, (char)destination);
				}
				break;
			case ChaoExit::CE_DarkLobby:
				if (CurrentChaoArea == 0x03)
				{
					WriteData<1>((void*)0x55AC06, (char)destination);
				}
				break;
			case ChaoExit::CE_DarkTransporter:
				if (CurrentChaoArea == 0x03)
				{
					WriteData<1>((void*)0x57D9E2, (char)destination);
				}
				break;
			case ChaoExit::CE_CaveNeutral:
				WriteData<1>((void*)0x58191A, (char)destination);
				WriteData<1>((void*)0x581A00, (char)destination);
				break;
			case ChaoExit::CE_CaveRace:
				WriteData<1>((void*)0x581993, (char)destination);
				break;
			case ChaoExit::CE_CaveKarate:
				WriteData<1>((void*)0x581936, (char)destination);
				break;
			case ChaoExit::CE_RaceCave:
				WriteData<1>((void*)0x533286, (char)destination);
				WriteData<1>((void*)0x533325, (char)destination);
				break;
			case ChaoExit::CE_KarateCave:
				WriteData<1>((void*)0x542EA5, (char)destination);
				break;
			case ChaoExit::CE_TransporterOut:
				//WriteData<1>((void*)0x542EA5, (char)destination);
				break;
			case ChaoExit::CE_KindergartenLobby:
				WriteData<1>((void*)0x54E53C, (char)destination);
				break;
			}
		}
	}
}

void ChaoGardenManager::SetChaoEnabled(bool chaoEnabled)
{
	// Anything Chao-related is active
	this->_chaoEnabled = chaoEnabled;
}

void ChaoGardenManager::SetChaoRaceEnabled(bool chaoRaceEnabled)
{
	this->_chaoRaceEnabled = chaoRaceEnabled;

	if (chaoRaceEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoKarateEnabled(bool chaoKarateEnabled)
{
	this->_chaoKarateEnabled = chaoKarateEnabled;

	if (chaoKarateEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoStatsEnabled(int chaoStatsEnabled)
{
	this->_chaoStatsEnabled = chaoStatsEnabled;

	if (chaoStatsEnabled > 0)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoBodyPartsEnabled(bool chaoBodyPartsEnabled)
{
	this->_chaoBodyPartsEnabled = chaoBodyPartsEnabled;

	if (chaoBodyPartsEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetChaoKindergartenEnabled(bool chaoKindergartenEnabled)
{
	this->_chaoKindergartenEnabled = chaoKindergartenEnabled;

	if (chaoKindergartenEnabled)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetBlackMarketSlots(int blackMarketSlots)
{
	this->_blackMarketSlots = blackMarketSlots;

	if (blackMarketSlots > 0)
	{
		this->SetChaoEnabled(true);
	}
}

void ChaoGardenManager::SetBlackMarketData(std::map<int, int> map)
{
	this->_blackMarketData = map;
}

void ChaoGardenManager::SetDefaultEggMap(std::map<int, int> map)
{
	this->_defaultEggMap = map;
}

void ChaoGardenManager::SetDefaultChaoNameMap(std::map<int, int> map)
{
	this->_defaultChaoNameMap = map;
}

void ChaoGardenManager::SetChaoERData(std::map<int, int> map)
{
	this->_chaoERData = map;
}

int ChaoGardenManager::GetTimescale()
{
	if (!this->_chaoEnabled)
	{
		return 0;
	}
	else
	{
		return this->_timescale;
	}
}

void ChaoGardenManager::LoadAPTextures()
{
	LoadTextures(&OrbsTexPacks[0]);

	WriteData((int*)(0x58A52C), (int)Orbs.chunkmodel);
	WriteData((int*)(0x5892D7), (int)Orbs.chunkmodel);
	WriteData((int*)(0x58A523), (int)&OrbsTexList);
	WriteData((int*)(0x5892DE), (int)&OrbsTexList);
}

void ChaoGardenManager::ReleaseAPTextures()
{
	ReleaseTextureList(&OrbsTexList);
}
