#include "../../pch.h"
#include "MinigameIconData.h"


static NJS_TEXANIM MGAnim[] = {
	//Bars
	{64, 256, 32, 128, 0x00, 0x00, 0x3F, 0xFF, 0, 0},
	{64, 256, 32, 128, 0x40, 0x00, 0x7F, 0xFF, 0, 0},
	{64, 256, 32, 128, 0x80, 0x00, 0xBF, 0xFF, 0, 0},
	{64, 256, 32, 128, 0xC0, 0x00, 0xFF, 0xFF, 0, 0},
	{64, 256, 32, 128, 0x00, 0x00, 0x3F, 0xFF, 0, 0},
	{64, 256, 32, 128, 0x40, 0x00, 0x7F, 0xFF, 0, 0},
	{64, 256, 32, 128, 0x80, 0x00, 0xBF, 0xFF, 0, 0},
	{64, 256, 32, 128, 0xC0, 0x00, 0xFF, 0xFF, 0, 0},
	//D-Pad
	{64, 64, 32, 32, 0x00, 0x00, 0x7F, 0xFF, 2, 0},
	{64, 64, 32, 32, 0x80, 0x00, 0xFF, 0xFF, 2, 0},
	//Single Icons
	{64, 64, 32, 32, 0x00, 0x00, 0x100, 0x100, 1, 0},
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 3, 0},
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 4, 0},
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 5, 0},
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 6, 0},
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 7, 0},
	{128, 128, 64, 64, 0x00, 0x00, 0x100, 0x100, 8, 0},
	{16, 16, 8, 8, 0x00, 0x00, 0x100, 0x100, 9, 0},
	//Boss Atlas
	{32, 32, 16, 16, 0xA0, 0x00, 0xB0, 0x1F, 10, 0}, //Bio Beam
	{32, 32, 16, 16, 0xC0, 0x00, 0xD0, 0x1F, 10, 0}, //Bio Bullet
	{14, 32, 7, 16, 0x9A, 0x20, 0xA0, 0x3D, 10, 0}, //Super Bullet
	{34, 48, 17, 24, 0x20, 0x40, 0x31, 0x70, 10, 0}, //Super Shadow
	{34, 48, 17, 24, 0x00, 0x40, 0x11, 0x70, 10, 0}, //Super Sonic
	{300, 50, 150, 25, 0x00, 0x00, 0x96, 0x32, 10, 0}, //Boss Body
	{100, 45, 50, 22, 0x40, 0x40, 0x72, 0x6D, 10, 0}, //Boss Arm
	{75, 100, 37, 50, 0xA0, 0x20, 0xC6, 0x7F, 10, 0}, //Boss Head
	{300, 50, 150, 25, 0x00, 0x87, 0x96, 0xBF, 10, 0}, //Earth
	{128, 128, 64, 64, 0xC0, 0x80, 0x100, 0x100, 10, 0}, //Stars BG
	//Minigame Atlas 0
	{128, 128, 64, 64, 0x00, 0x00, 0x3F, 0x3F, 13, 0}, //Artificial Chaos Round
	{128, 128, 64, 64, 0x40, 0x00, 0x7F, 0x3F, 13, 0}, //Artificial Chaos Tall
	{128, 128, 64, 64, 0x80, 0x00, 0xBF, 0x3F, 13, 0}, //Beetle
	{128, 128, 64, 64, 0xC0, 0x00, 0xFF, 0x3F, 13, 0}, //Beetle Gun
	{128, 128, 64, 64, 0x00, 0x40, 0x3F, 0x7F, 13, 0}, //Barrel
	{128, 128, 64, 64, 0x40, 0x40, 0x7F, 0x7F, 13, 0}, //F Rank
	{128, 128, 64, 64, 0x81, 0x40, 0xBF, 0x7F, 13, 0}, //Chopper
	{64, 64, 32, 32, 0xC0, 0x41, 0xDF, 0x5F, 13, 0}, //Bio Snake Head
	{64, 64, 32, 32, 0xE0, 0x41, 0xFF, 0x5F, 13, 0}, //Bio Snake Tail
	{64, 64, 32, 32, 0xC0, 0x61, 0xDF, 0x7F, 13, 0}, //Bio Snake Body Straight
	{64, 64, 32, 32, 0xE0, 0x61, 0xFF, 0x7F, 13, 0}, //Bio Snake Body Turn
	{64, 64, 32, 32, 0xFF, 0x61, 0xE0, 0x7F, 13, 0}, //Bio Snake Body Turn Mirrored
	{256, 128, 128, 64, 0x00, 0x80, 0x7F, 0xBF, 13, 0}, //Bobber
	{256, 128, 128, 64, 0x00, 0xC0, 0x7F, 0xFF, 13, 0}, //Bobber Splash
	{256, 128, 128, 64, 0x80, 0x80, 0xFF, 0xBF, 13, 0}, //Big 0
	{256, 128, 128, 64, 0x80, 0xC0, 0xFF, 0xFF, 13, 0}, //Big 1
	//Minigame Atlas 1
	{256, 128, 128, 64, 0x00, 0x00, 0x7F, 0x3F, 14, 0}, //Caught Banner
	{256, 128, 128, 64, 0x80, 0x00, 0xFF, 0x3F, 14, 0}, //Miss Banner
	{128, 128, 64, 64, 0x00, 0x40, 0x3F, 0x7F, 14, 0}, //Sonic Head
	{128, 128, 64, 64, 0x40, 0x40, 0x7F, 0x7F, 14, 0}, //Bomb
	{128, 128, 64, 64, 0x80, 0x40, 0xBF, 0x7F, 14, 0}, //Green Check
	{128, 128, 64, 64, 0xC0, 0x40, 0xFF, 0x7F, 14, 0}, //Green Circle
	{128, 128, 64, 64, 0x00, 0x80, 0x3F, 0xBF, 14, 0}, //Red X
	{128, 128, 64, 64, 0x40, 0x80, 0x7F, 0xBF, 14, 0}, //Bobber Circle
	{128, 128, 64, 64, 0x80, 0x80, 0xBF, 0xBF, 14, 0}, //Life Box
	{128, 128, 64, 64, 0xC0, 0x80, 0xFF, 0xBF, 14, 0}, //Safe Handle
	{256, 128, 128, 64, 0x00, 0xC0, 0x7F, 0xFF, 14, 0}, //Caught Big Banner
	{256, 128, 128, 64, 0x80, 0xC0, 0xFF, 0xFF, 14, 0}, //Miss Big Banner
	//Minigame Atlas 2
	{128, 128, 64, 64, 0x00, 0x00, 0x3F, 0x3F, 15, 0}, //Tile Unlit
	{128, 128, 64, 64, 0x40, 0x00, 0x7F, 0x3F, 15, 0}, //Tile Lit
	{128, 128, 64, 64, 0x80, 0x00, 0xBF, 0x3F, 15, 0}, //Tile Disabled
	{128, 128, 64, 64, 0xC1, 0x00, 0xFF, 0x3F, 15, 0}, //Bumper
	{128, 128, 64, 64, 0x00, 0x40, 0x3F, 0x7F, 15, 0}, //Star
	{256, 128, 128, 64, 0x00, 0x80, 0x7F, 0xBF, 15, 0}, //Tri-Bumper Right
	{256, 128, 128, 64, 0x80, 0x80, 0xFF, 0xBF, 15, 0}, //Tri-Bumper Left
	{128, 128, 64, 64, 0x00, 0xC0, 0x3F, 0xFF, 15, 0}, //Bee Taters
	{128, 128, 64, 64, 0x40, 0xC0, 0x7F, 0xFF, 15, 0}, //Bee Pory
	{128, 128, 64, 64, 0x80, 0xC0, 0xBF, 0xFF, 15, 0}, //Bee Ras
	{128, 128, 64, 64, 0xC0, 0xC0, 0xFF, 0xFF, 15, 0}, //Bee Unknown Battlegrounds
	//Minigame Mini Atlas 0
	{20, 256, 10, 128, 0x00, 0x00, 0x13, 0xFF, 16, 0}, // Fishing BG
	{15, 256, 7, 128, 0x31, 0x00, 0x3F, 0xFF, 16, 0}, // Fishing Bar Outline
	{15, 20, 7, 10, 0x40, 0x00, 0x4E, 0x14, 16, 0}, // Fishing Bar Cap
	{25, 224, 12, 64, 0x4C, 0x20, 0x65, 0xFF, 16, 0}, // Flipper
	{70, 20, 35, 10, 0x67, 0x00, 0xAD, 0x13, 16, 0}, // Block Green
	{70, 20, 35, 10, 0x67, 0x14, 0xAD, 0x28, 16, 0}, // Block Purple
	{70, 20, 35, 10, 0x67, 0x29, 0xAD, 0x3D, 16, 0}, // Block Deep Purple
	{20, 65, 10, 32, 0xAC, 0x00, 0xC1, 0x41, 16, 0}, // Fishing Catch Bar
	{59, 232, 30, 116, 0xC4, 0x00, 0xFF, 0xE7, 16, 0}, // Tile Arrow
	//Boss Part 2
	{64, 64, 32, 32, 0x80, 0x40, 0x9F, 0x7F, 10, 0}, //Boss Weakpoint
	{10, 10, 5, 5, 0x00, 0xEC, 0x05, 0xF5, 10, 0}, //Boss Bar Left
	{10, 10, 5, 5, 0x10, 0xEC, 0x15, 0xF5, 10, 0}, //Boss Bar Right
	{128, 10, 64, 5, 0x00, 0xF6, 0x3F, 0xFF, 10, 0}, //Boss Bar Center
	//Pokemon
	//Poke Atlas 0
	{128, 128, 64, 64, 0x00, 0x00, 0x3F, 0x3F, 11, 0},
	{128, 128, 64, 64, 0x40, 0x00, 0x7F, 0x3F, 11, 0},
	{128, 128, 64, 64, 0x80, 0x00, 0xBF, 0x3F, 11, 0},
	{128, 128, 64, 64, 0xC0, 0x00, 0xFF, 0x3F, 11, 0},
	{128, 128, 64, 64, 0x00, 0x40, 0x3F, 0x7F, 11, 0},
	{128, 128, 64, 64, 0x40, 0x40, 0x7F, 0x7F, 11, 0},
	{128, 128, 64, 64, 0x80, 0x40, 0xBF, 0x7F, 11, 0},
	{128, 128, 64, 64, 0xC0, 0x40, 0xFF, 0x7F, 11, 0},
	{128, 128, 64, 64, 0x00, 0x80, 0x3F, 0xBF, 11, 0},
	{128, 128, 64, 64, 0x40, 0x80, 0x7F, 0xBF, 11, 0},
	{128, 128, 64, 64, 0x80, 0x80, 0xBF, 0xBF, 11, 0},
	{128, 128, 64, 64, 0xC0, 0x80, 0xFF, 0xBF, 11, 0},
	{128, 128, 64, 64, 0x00, 0xC0, 0x3F, 0xFF, 11, 0},
	{128, 128, 64, 64, 0x40, 0xC0, 0x7F, 0xFF, 11, 0},
	{128, 128, 64, 64, 0x80, 0xC0, 0xBF, 0xFF, 11, 0},
	{128, 128, 64, 64, 0xC0, 0xC0, 0xFF, 0xFF, 11, 0},
	//Poke Atlas 1
	{128, 128, 64, 64, 0x00, 0x00, 0x3F, 0x3F, 12, 0},
	{128, 128, 64, 64, 0x40, 0x00, 0x7F, 0x3F, 12, 0},
	{128, 128, 64, 64, 0x80, 0x00, 0xBF, 0x3F, 12, 0},
	{128, 128, 64, 64, 0xC0, 0x00, 0xFF, 0x3F, 12, 0},
	{128, 128, 64, 64, 0x00, 0x40, 0x3F, 0x7F, 12, 0},
	{128, 128, 64, 64, 0x40, 0x40, 0x7F, 0x7F, 12, 0},
	{128, 128, 64, 64, 0x80, 0x40, 0xBF, 0x7F, 12, 0},
	{128, 128, 64, 64, 0xC0, 0x40, 0xFF, 0x7F, 12, 0},
	{128, 128, 64, 64, 0x00, 0x80, 0x3F, 0xBF, 12, 0},
	{128, 128, 64, 64, 0x40, 0x80, 0x7F, 0xBF, 12, 0},
	{128, 128, 64, 64, 0x80, 0x80, 0xBF, 0xBF, 12, 0},
	{128, 128, 64, 64, 0xC0, 0x80, 0xFF, 0xBF, 12, 0},
	{128, 128, 64, 64, 0x00, 0xC0, 0x3F, 0xFF, 12, 0},
	{128, 128, 64, 64, 0x40, 0xC0, 0x7F, 0xFF, 12, 0},
	{128, 128, 64, 64, 0x80, 0xC0, 0xBF, 0xFF, 12, 0},
	{128, 128, 64, 64, 0xC0, 0xC0, 0xFF, 0xFF, 12, 0},
	//Padding
	{40, 32, 20, 16, 0x0A, 0x10, 0x34, 0x30, 0, 0},
};

static const int MinigameAnimLength = 113;

FunctionPointer(void, ReleaseTextureList, (NJS_TEXLIST* a1), 0x77F9F0);

static const int MinigameTexCount = 17;

static NJS_TEXNAME MinigameTexName[MinigameTexCount];
static NJS_TEXLIST MinigameTexList = { MinigameTexName, MinigameTexCount };

static TexPackInfo MinigameTexPacks[] = {
	{ "AP_MINIGAME", &MinigameTexList },
	{ nullptr, nullptr }, //Needs to end in a null entry to prevent the LoadTextures call from iterating past the packs
};

NJS_TEXANIM* MinigameIconData::GetAnim(MinigameIcon icon)
{
	return &MGAnim[icon];
}

void MinigameIconData::LoadIcons()
{
	LoadTextures(&MinigameTexPacks[0]);
	this->MinigameAnims = &MGAnim[0];
	this->MinigameTex = &MinigameTexList;
	this->AnimLength = MinigameAnimLength;

	float ratio = 480.0f / VerticalResolution;
	float adjustedHorizontal = HorizontalResolution * ratio;
	float adjustedMin = (adjustedHorizontal - 640.0f) / 2.0f;
	float adjustedMax = adjustedHorizontal - adjustedMin;
	adjustedMin = -adjustedMin;
	this->xMin = adjustedMin;
	this->xMax = adjustedMax;
	this->xCenter = this->xMax / 2.0f + this->xMin / 2.0f;
}

void MinigameIconData::ReleaseIcons()
{
	ReleaseTextureList(&MinigameTexList);
}